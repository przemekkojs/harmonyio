@page
@model Main.Pages.CreatedModel
@using Main.Enumerations;
@using NuGet.Protocol

<head>
    <link rel="stylesheet" href="~/css/quiz-lists-style.css" />
</head>

<div class="h-100 w-100 d-flex flex-column flex-md-row mb-3">
    <form method="post" asp-page-handler="Delete" id="deleteFormForQuiz">
        <input type="hidden" asp-for="QuizId" value="" id="deleteFormQuizId" />
    </form>

    <form method="post" asp-page-handler="Publish" id="publishFormForQuiz">
        <input type="hidden" asp-for="QuizId" value="" id="publishFormQuizId" />
        <input type="hidden" asp-for="OpenDate" value="" id="publishFormOpenDateForQuiz" />
        <input type="hidden" asp-for="CloseDate" value="" id="publishFormCloseDateForQuiz" />
    </form>

    <form method="post" asp-page-handler="Assign" id="assignFormForQuiz">
        <input type="hidden" asp-for="QuizId" value="" id="assignFormQuizId" />
        <input type="hidden" asp-for="Emails" value="" id="assignFormEmailsForQuiz" />
        <input type="hidden" asp-for="GroupsIds" value="" id="assignFormGroupsForQuiz" />
    </form>


    <div
        class="w-100 w-md-50 flex-grow-1 overflow-md-auto flex-column d-flex bg-white rounded shadow px-3 pt-3 me-3 mb-3">

        @if (
        Model.ReadyToGrade.Count != 0 ||
        Model.Opened.Count != 0 ||
        Model.NotOpened.Count != 0 ||
        Model.Closed.Count != 0
        )
        {
            @if (Model.ReadyToGrade.Count > 0)
            {
                <div class="fw-bold fs-4 mb-3">Do Oceny</div>

                @foreach (var quiz in Model.ReadyToGrade)
                {
                    <div class="border rounded shadow-sm mb-3 p-0 flex-shrink-0 d-flex flex-row p-3">
                        <div class="flex-grow-1 d-flex flex-column flex-basis-0 overflow-hidden">
                            <div class="fw-bold fs-5 mb-3 text-truncate">@quiz.Name</div>

                            <div class="d-flex flex-row align-items-center mb-2">
                                <i class="far fa-clock icon-sm me-2"></i>
                                <span class="text-truncate">
                                    <span class="fw-bold">Otwarcie:</span>
                                    @quiz.OpenDate
                                </span>
                            </div>
                            <div class="d-flex flex-row align-items-center mb-2">
                                <i class="far fa-clock icon-sm me-2"></i>
                                <span class="text-truncate">
                                    <span class="fw-bold">Zamknięcie:</span>
                                    @quiz.CloseDate
                                </span>
                            </div>
                            <div class="d-flex flex-row align-items-center">
                                <i class="fas fa-user-group icon-sm me-2"></i>
                                <span class="text-truncate">
                                    <span class="fw-bold">Wypełniono:</span>
                                    @Model.QuizesToUsersCompleted[quiz].Item1 / <span id="gradeParticipantsCount@(quiz.Id)">@Model.QuizesToUsersCompleted[quiz].Item2</span>
                                </span>
                            </div>
                        </div>

                        <div class="d-flex flex-column h-100 ms-2">
                            @if(quiz.State == QuizState.Open) {
                                var callbackUrl = Url.Page(
                                                    "/Solve",
                                                    pageHandler: null,
                                                    values: new { code = quiz.Code },
                                                    protocol: Request.Scheme);
                                <div class="d-flex flex-row">
                                    <a href="#" class="btn-icon ms-auto" data-bs-toggle="modal"
                                        data-bs-target="#assignPopup" data-quiz-id="@quiz.Id" data-quiz-name="@quiz.Name"
                                        data-pin="@quiz.Code" data-url="@(callbackUrl)"
                                        data-all-groups='@(Model.Groups.ToJson())'
                                        data-added-groups='@(quiz.PublishedToGroup.Select(q => q.Id).ToJson())'
                                        data-callback-name="assign">
                                        <i class="fas fa-share-alt icon-sm"></i>
                                    </a>
                                </div>
                            }

                            <div class="d-flex flex-row ms-auto mt-auto">
                                <a asp-page="Grade" asp-route-id="@quiz.Id" class="btn btn-primary ms-auto mt-auto">Oceń</a>
                            </div>
                        </div>
                    </div>
                }
            }


            @if (Model.Opened.Count > 0)
            {
                <div class="fw-bold fs-4 mb-3">Otwarte</div>

                @foreach (var quiz in Model.Opened)
                {
                    var callbackUrl = Url.Page(
                                        "/Solve",
                                        pageHandler: null,
                                        values: new { code = quiz.Code },
                                        protocol: Request.Scheme);

                    <div class="border rounded shadow-sm mb-3 p-0 d-flex flex-row flex-shrink-0 p-3">
                        <div class="flex-grow-1 d-flex flex-column flex-column flex-basis-0 overflow-hidden">
                            <div class="fw-bold fs-5 mb-3 text-truncate" style="max-width: 100%;">@quiz.Name</div>

                            <div class="d-flex flex-row align-items-center mb-2">
                                <i class="far fa-clock icon-sm me-2"></i>
                                <span class="text-truncate">
                                    <span class="fw-bold">Otwarcie:</span>
                                    @quiz.OpenDate
                                </span>
                            </div>
                            <div class="d-flex flex-row align-items-center mb-2">
                                <i class="far fa-clock icon-sm me-2"></i>
                                <span class="text-truncate">
                                    <span class="fw-bold">Zamknięcie:</span>
                                    @quiz.CloseDate
                                </span>
                            </div>
                            <div class="d-flex flex-row align-items-center">
                                <i class="fas fa-user-group icon-sm me-2"></i>
                                <span class="text-truncate">
                                    <span class="fw-bold">Wypełniono:</span>
                                    @Model.QuizesToUsersCompleted[quiz].Item1 / <span id="participantsCount@(quiz.Id)">@Model.QuizesToUsersCompleted[quiz].Item2</span>
                                </span>
                            </div>
                        </div>

                        <div class="d-flex flex-column h-100 ms-2">
                            <div class="d-flex flex-row">
                                <a href="#" class="btn-icon ms-auto" data-bs-toggle="modal"
                                    data-bs-target="#assignPopup" data-quiz-id="@quiz.Id" data-quiz-name="@quiz.Name"
                                    data-pin="@quiz.Code" data-url="@(callbackUrl)"
                                    data-all-groups='@(Model.Groups.ToJson())'
                                    data-added-groups='@(quiz.PublishedToGroup.Select(q => q.Id).ToJson())'
                                    data-callback-name="assign">
                                    <i class="fas fa-share-alt icon-sm"></i>
                                </a>
                            </div>

                            @if(@Model.QuizesToUsersCompleted[quiz].Item1 != 0) {
                                <div class="d-flex flex-row ms-auto mt-auto">
                                    <a asp-page="Grade" asp-route-id="@quiz.Id" class="btn btn-primary ms-auto mt-auto">Oceń</a>
                                </div>
                            }
                        </div>
                    </div>
                }
            }


            @if (Model.NotOpened.Count > 0)
            {
                <div class="fw-bold fs-4 mb-3">Zaplanowane</div>

                @foreach (var quiz in Model.NotOpened)
                {
                    var callbackUrl = Url.Page(
                    "/Solve",
                    pageHandler: null,
                    values: new { code = quiz.Code },
                    protocol: Request.Scheme);

                    <div class="border rounded shadow-sm mb-3 p-0 d-flex flex-row flex-shrink-0 p-3">
                        <div class="flex-grow-1 d-flex flex-column flex-column flex-basis-0 overflow-hidden">
                            <div class="fw-bold fs-5 mb-3 text-truncate" style="max-width: 100%;">@quiz.Name</div>

                            <div class="d-flex flex-row align-items-center mb-2">
                                <i class="far fa-clock icon-sm me-2"></i>
                                <span class="text-truncate">
                                    <span class="fw-bold">Otwarcie:</span>
                                    @quiz.OpenDate
                                </span>
                            </div>
                            <div class="d-flex flex-row align-items-center mb-2">
                                <i class="far fa-clock icon-sm me-2"></i>
                                <span class="text-truncate">
                                    <span class="fw-bold">Zamknięcie:</span>
                                    @quiz.CloseDate
                                </span>
                            </div>
                            <div class="d-flex flex-row align-items-center">
                                <i class="fas fa-user-group icon-sm me-2"></i>
                                <span class="text-truncate">
                                    <span class="fw-bold">Przypisani:</span>
                                    <span id="participantsCount@(quiz.Id)">@Model.QuizesToUsersCompleted[quiz].Item2</span>
                                </span>
                            </div>
                        </div>

                        <div class="d-flex flex-column h-100 ms-2"> 
                            <a href="#" class="btn-icon ms-auto" data-bs-toggle="modal"
                                data-bs-target="#assignPopup" data-quiz-id="@quiz.Id" data-quiz-name="@quiz.Name"
                                data-pin="@quiz.Code" data-url="@(callbackUrl)"
                                data-all-groups='@(Model.Groups.ToJson())'
                                data-added-groups='@(quiz.PublishedToGroup.Select(q => q.Id).ToJson())'
                                data-callback-name="assign">
                                <i class="fas fa-share-alt icon-sm"></i>
                            </a>
                        </div>
                    </div>
                }
            }

            @if (Model.Closed.Count > 0)
            {
                <div class="fw-bold fs-4 mb-3">Zamknięte</div>

                @foreach (var quiz in Model.Closed)
                {
                    <div class="border rounded shadow-sm mb-3 p-0 d-flex flex-row flex-shrink-0 p-3">
                        <div class="flex-grow-1 d-flex flex-column flex-column flex-basis-0 overflow-hidden">
                            <div class="fw-bold fs-5 mb-3 text-truncate">@quiz.Name</div>

                            <div class="d-flex flex-row align-items-center mb-2">
                                <i class="far fa-clock icon-sm me-2"></i>
                                <span class="text-truncate">
                                    <span class="fw-bold">Otwarcie:</span>
                                    @quiz.OpenDate
                                </span>
                            </div>
                            <div class="d-flex flex-row align-items-center mb-2">
                                <i class="far fa-clock icon-sm me-2"></i>
                                <span class="text-truncate">
                                    <span class="fw-bold">Zamknięcie:</span>
                                    @quiz.CloseDate
                                </span>
                            </div>
                            <div class="d-flex flex-row align-items-center">
                                <i class="fas fa-user-group icon-sm me-2"></i>
                                <span class="text-truncate">
                                    <span class="fw-bold">Wypełniono:</span>
                                    @Model.QuizesToUsersCompleted[quiz].Item1 / @Model.QuizesToUsersCompleted[quiz].Item2
                                </span>
                            </div>
                        </div>

                        <div class="d-flex flex-column h-100 ms-2">
                            <a asp-page="Grade" asp-route-id="@quiz.Id" class="btn btn-primary ms-auto mt-auto">Edytuj oceny</a>
                        </div>
                    </div>
                }
            }
        }
        else
        {
            <div class="fw-bold fs-4 mb-3">Opublikowane</div>
            <p>Nie masz jeszcze żadnych opublikowanych quizów... Utwórz szkic a następnie go opublikuj, a pojawi się on tutaj!</p>
        }
    </div>

    <div class="w-100 w-md-50 flex-grow-1 overflow-md-auto d-flex flex-column bg-white rounded shadow px-3 pt-3 mb-3">
        <div class="fw-bold fs-4 mb-3">Szkice</div>
        
        @foreach (var quiz in Model.Sketches)
        {
            <div class="border rounded shadow-sm mb-3 p-0 d-flex flex-row flex-shrink-0 p-3">
                <div class="flex-grow-1 d-flex flex-column flex-basis-0 overflow-hidden">
                    <div class="fw-bold fs-5 text-truncate">@quiz.Name</div>
                    <div class="text-truncate" style="margin-top: -4px; margin-bottom: 60px;">
                        Oczekuje na publikację...
                    </div>

                    <div class="d-flex flex-row align-items-center">
                        <i class="fas fa-music icon-sm me-2"></i>
                        <span class="text-truncate">
                            <span class="fw-bold">Zadania:</span>
                            @quiz.Excersises.Count
                        </span>
                    </div>
                </div>

                <div class="d-flex flex-column h-100 ms-2">
                    <div class="d-flex flex-row">
                        <a asp-page="Creator" asp-route-id="@quiz.Id" class="btn-icon me-3 ms-auto">
                            <i class="fas fa-pencil icon-sm"></i>
                        </a>

                        <a href="#" class="btn-icon" data-bs-toggle="modal" data-bs-target="#deleteQuizPopup"
                            data-quiz-name="@quiz.Name" data-on-delete="deleteQuiz(@quiz.Id)">
                            <i class="far fa-trash-can icon-sm"></i>
                        </a>
                    </div>

                    <a href="#" class="btn btn-primary mt-auto" data-bs-toggle="modal" data-bs-target="#publishPopup"
                        data-quiz-id="@quiz.Id" data-quiz-name="@quiz.Name" data-callback-name="publish">
                        Opublikuj
                    </a>
                </div>
            </div>
        }

        <a asp-page="Creator" class="no-style mb-3">
            <div class="quiz quiz-add rounded d-flex justify-content-center align-items-center">
                <i class="fas fa-plus me-1"></i>

                <span class="fw-bold">Utwórz nowy quiz</span>
            </div>
        </a>
    </div>
</div>

<partial name="~/Pages/Shared/DeleteQuizPopup.cshtml" />
<partial name="~/Pages/Shared/PublishPopup.cshtml" />
<partial name="~/Pages/Shared/AssignPopup.cshtml" />

<script>
    function deleteQuiz(quizId) {
        document.getElementById("deleteFormQuizId").value = quizId;
        document.getElementById("deleteFormForQuiz").submit();
    }

    function publish(quizId, openDateTime, closeDateTime) {
        //TODO: Publish this quiz (open i close date są validowane w popupie, ale dobrze zrobić to jeszcze raz na backendzie)

        document.getElementById("publishFormQuizId").value = quizId;
        document.getElementById("publishFormOpenDateForQuiz").value = openDateTime;
        document.getElementById("publishFormCloseDateForQuiz").value = closeDateTime;
        document.getElementById("publishFormForQuiz").submit();

        //TODO: Po opublikowaniu powinien od razu włączyć się assign popup
        // (można go włączyć przyciskiem Udostępnij, ale dobrze jakby włączał się też automatycznie)
    }

    async function assign(quizId, assignedEmails, assignedGroups) {
        // no new email or groups so just return null and close modal
        if(assignedEmails.length === 0 && assignedGroups.length === 0) {
            console.log("early return");
            return null;
        }

        document.getElementById("assignFormQuizId").value = quizId;
        document.getElementById("assignFormEmailsForQuiz").value = assignedEmails;
        document.getElementById("assignFormGroupsForQuiz").value = assignedGroups;

        form = document.getElementById("assignFormForQuiz");
        const formData = new FormData(form);

        try {
            const response = await fetch(form.action, {
                method: form.method,
                body: formData,
                redirect: 'follow'
            });

            // Handle Forbidden (403) response
            if (response.status === 403) {
                window.location.href = '/Identity/Account/Login';
                return null;
            }

            // Handle redirect responses
            if (response.redirected) {
                window.location.href = response.url;
                return null;
            }

            // Handle JSON responses (for normal operation)
            if (response.headers.get('content-type')?.includes('application/json')) {
                const result = await response.json();

                if (result.notFoundEmails) {
                    return result.notFoundEmails;
                }

                if (result.success) {
                    console.log('Users added successfully');
                    updateQuizElements(quizId, result);
                    return null;
                }
            }
            return null;
        }
        catch (error) {
            console.error('An error occurred:', error);
            return null;
        }
    }

    function updateQuizElements(quizId, result){
        // update participants count for quiz
        const gradeParticipantsCount = document.getElementById("gradeParticipantsCount" + quizId);
        const participantsCount = document.getElementById("participantsCount" + quizId);
        if(gradeParticipantsCount) {
            const curCount = parseInt(gradeParticipantsCount.innerHTML);
            gradeParticipantsCount.innerHTML = curCount + result.addedParticipantsCount;
        }
        if(participantsCount) {
            const curCount = parseInt(participantsCount.innerHTML);
            participantsCount.innerHTML = curCount + result.addedParticipantsCount;
        }

        // update added groups for quiz share button
        const links = document.querySelectorAll(`a[data-quiz-id='${quizId}']`);
        links.forEach(link => {
            const addedGroupsAttribute = link.getAttribute('data-added-groups')
            let addedGroups = JSON.parse(addedGroupsAttribute);

            if (addedGroups && Array.isArray(addedGroups)) {
                addedGroups = [...new Set([...result.newGroupIds, ...addedGroups])];
                link.setAttribute('data-added-groups', JSON.stringify(addedGroups));
            }
        });

    }

</script>
