@page
@model Main.Pages.CreatedModel
@using Main.Enumerations;
@using NuGet.Protocol
@{
    var sketches = Model.UsersQuizes.Where(q => !q.IsCreated).ToList();
    var allPublished = Model.UsersQuizes.Where(q => q.IsCreated).ToList();

    var readyToGrade = allPublished.Where(q => Model.IsReadyToGrade(q)).ToList();
    var closed = allPublished.Except(readyToGrade).Where(q => q.QuizResults.Count > 0).ToList();
    var published = allPublished.Except(readyToGrade).Except(closed).ToList();
}

<head>
    <link rel="stylesheet" href="~/css/quiz-lists-style.css" />
</head>

<div class="h-100 w-100 d-flex flex-column flex-md-row mb-3">
    @foreach(var quiz in Model.UsersQuizes)
    {
        <form method="post" asp-page-handler="Delete" id="deleteFormForQuiz@(quiz.Id)">
            <input type="hidden" asp-for="QuizId" value=@(quiz.Id) />
            <input type="hidden" asp-for="Groups" value="@(Model.Groups)" /> @* nie usuwać, bez tego nie działa *@
        </form>

        <form method="post" asp-page-handler="Publish" id="publishFormForQuiz@(quiz.Id)">
            <input type="hidden" asp-for="QuizId" value=@(quiz.Id) />
            <input type="hidden" asp-for="OpenDate" value="" id="openDateForQuiz@(quiz.Id)" />
            <input type="hidden" asp-for="CloseDate" value="" id="closeDateForQuiz@(quiz.Id)" />
            <input type="hidden" asp-for="Groups" value="@(Model.Groups)" /> @* nie usuwać, bez tego nie działa *@
        </form>
        
        <form method="post" asp-page-handler="Assign" id="assignFormForQuiz@(quiz.Id)">
            <input type="hidden" asp-for="QuizId" value=@(quiz.Id) />
            <input type="hidden" asp-for="Emails" value="" id="emailsForQuiz@(quiz.Id)" />
            <input type="hidden" asp-for="GroupsIds" value="" id="groupsForQuiz@(quiz.Id)" />
            <input type="hidden" asp-for="Groups" value="@(Model.Groups)" />
        </form>
    }

    <div class="w-100 w-md-50 flex-grow-1 overflow-md-auto flex-column d-flex bg-white rounded shadow px-3 pt-3 me-3 mb-3">

        @if (allPublished.Count > 0)
        {
            @if (readyToGrade.Count > 0)
            {
                <div class="fw-bold fs-4 mb-3">Do Oceny</div>
            }
            @foreach (var quiz in readyToGrade)
            {
                <div class="border rounded shadow-sm mb-3 p-0 flex-shrink-0 d-flex flex-row p-3">
                    <div class="flex-grow-1 d-flex flex-column flex-basis-0 overflow-hidden">
                        <div class="fw-bold fs-5 mb-3 text-truncate">@quiz.Name</div>

                        <div class="d-flex flex-row align-items-center mb-2">
                            <i class="far fa-clock icon-sm me-2"></i>
                            <span class="text-truncate">
                                <span class="fw-bold">Otwarcie:</span> 
                                @quiz.OpenDate
                            </span>
                        </div>
                        <div class="d-flex flex-row align-items-center mb-2">
                            <i class="far fa-clock icon-sm me-2"></i>
                            <span class="text-truncate">
                                <span class="fw-bold">Zamknięcie:</span> 
                                @quiz.CloseDate
                            </span>
                        </div>
                        <div class="d-flex flex-row align-items-center">
                            <i class="fas fa-user-group icon-sm me-2"></i>
                            <span class="text-truncate">
                                <span class="fw-bold">Wypełniono:</span> 
                                @Model.QuizesToUsersCompleted[quiz].Item1 / @Model.QuizesToUsersCompleted[quiz].Item2
                            </span>
                        </div>
                    </div>

                    <div class="d-flex flex-column h-100 ms-2">
                        <a asp-page="Grade" asp-route-id="@quiz.Id" class="btn btn-primary ms-auto mt-auto">Oceń</a>
                    </div>
                </div>
            }

            @if (published.Count > 0)
            {
                <div class="fw-bold fs-4 mb-3">Opublikowane</div>
            }
            @foreach (var quiz in published)
            {
                var callbackUrl = Url.Page(
                        "/Solve",
                        pageHandler: null,
                        values: new { code = quiz.Code },
                        protocol: Request.Scheme);
                
                <div class="border rounded shadow-sm mb-3 p-0 d-flex flex-row flex-shrink-0 p-3">
                    <div class="flex-grow-1 d-flex flex-column flex-column flex-basis-0 overflow-hidden">
                        <div class="fw-bold fs-5 mb-3 text-truncate" style="max-width: 100%;">@quiz.Name</div>

                        <div class="d-flex flex-row align-items-center mb-2">
                            <i class="far fa-clock icon-sm me-2"></i>
                            <span class="text-truncate">
                                <span class="fw-bold">Otwarcie:</span> 
                                @quiz.OpenDate
                            </span>
                        </div>
                        <div class="d-flex flex-row align-items-center mb-2">
                            <i class="far fa-clock icon-sm me-2"></i>
                            <span class="text-truncate">
                                <span class="fw-bold">Zamknięcie:</span> 
                                @quiz.CloseDate
                            </span>
                        </div>
                        <div class="d-flex flex-row align-items-center">
                            <i class="fas fa-user-group icon-sm me-2"></i>
                            <span class="text-truncate">
                                <span class="fw-bold">Wypełniono:</span> 
                                @Model.QuizesToUsersCompleted[quiz].Item1 / @Model.QuizesToUsersCompleted[quiz].Item2
                            </span>
                        </div>
                    </div>

                    <div class="d-flex flex-column h-100 ms-2">
                        <div class="d-flex flex-row">
                            <a asp-page="Creator" asp-route-id="@quiz.Id" class="btn-icon ms-auto">
                                <i class="fas fa-magnifying-glass icon-sm"></i>
                            </a>
                        </div>

                        <div class="d-flex flex-row ms-auto mt-auto">
                            @if (quiz.State != QuizState.NotStarted)
                            {
                                <a asp-page="Grade" asp-route-id="@quiz.Id" class="btn btn-primary ms-auto mt-auto">Oceń</a>
                            }
                            <a href="#" class="btn btn-primary ms-2 mt-auto" data-bs-toggle="modal" data-bs-target="#assignPopup"
                            data-quiz-id="@quiz.Id" data-quiz-name="@quiz.Name" data-pin="@quiz.Code"
                            data-url="@(callbackUrl)"
                            data-emails='@(new List<string>().ToJson())'
                            data-all-groups='@(Model.Groups.ToJson())'
                            data-added-groups='@(quiz.PublishedToGroup.Select(q => q.Id).ToJson())'
                            data-callback-name="assign">
                                Udostępnij
                            </a>
                        </div>
                        
                    </div>
                </div>
            }

            @if (closed.Count > 0)
            {
                <div class="fw-bold fs-4 mb-3">Zamknięte</div>
            }
            @foreach (var quiz in closed)
            {
                <div class="border rounded shadow-sm mb-3 p-0 d-flex flex-row flex-shrink-0 p-3">
                    <div class="flex-grow-1 d-flex flex-column flex-column flex-basis-0 overflow-hidden">
                        <div class="fw-bold fs-5 mb-3 text-truncate">@quiz.Name</div>

                        <div class="d-flex flex-row align-items-center mb-2">
                            <i class="far fa-clock icon-sm me-2"></i>
                            <span class="text-truncate">
                                <span class="fw-bold">Otwarcie:</span> 
                                @quiz.OpenDate
                            </span>
                        </div>
                        <div class="d-flex flex-row align-items-center mb-2">
                            <i class="far fa-clock icon-sm me-2"></i>
                            <span class="text-truncate">
                                <span class="fw-bold">Zamknięcie:</span> 
                                @quiz.CloseDate
                            </span>
                        </div>
                        <div class="d-flex flex-row align-items-center">
                            <i class="fas fa-user-group icon-sm me-2"></i>
                            <span class="text-truncate">
                                <span class="fw-bold">Wypełniono:</span> 
                                @Model.QuizesToUsersCompleted[quiz].Item1 / @Model.QuizesToUsersCompleted[quiz].Item2
                            </span>
                        </div>
                    </div>

                    <div class="d-flex flex-column h-100 ms-2">
                        <a asp-page="Grade" asp-route-id="@quiz.Id" class="btn btn-primary ms-auto mt-auto">Edytuj oceny</a>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="fw-bold fs-4 mb-3">Opublikowane</div>
            <p>Nie masz jeszcze żadnych opublikowanych quizów... Utwórz szkic oraz go opublikuj, a pojawi się on tutaj!</p>
        }
    </div>

    <div class="w-100 w-md-50 flex-grow-1 overflow-md-auto d-flex flex-column bg-white rounded shadow px-3 pt-3 mb-3"> 
        <div class="fw-bold fs-4 mb-3">Szkice</div>
        @foreach (var quiz in sketches)
        {
            <div class="border rounded shadow-sm mb-3 p-0 d-flex flex-row flex-shrink-0 p-3">
                <div class="flex-grow-1 d-flex flex-column flex-basis-0 overflow-hidden">
                    <div class="fw-bold fs-5 text-truncate">@quiz.Name</div>
                    <div class="text-truncate" style="margin-top: -4px; margin-bottom: 60px;">
                        Oczekuje na publikację...
                    </div>

                    <div class="d-flex flex-row align-items-center">
                        <i class="fas fa-music icon-sm me-2"></i>
                        <span class="text-truncate">
                            <span class="fw-bold">Zadania:</span> 
                            @quiz.Excersises.Count
                        </span>
                    </div>
                </div>

                <div class="d-flex flex-column h-100 ms-2">
                    <div class="d-flex flex-row">
                        <a asp-page="Creator" asp-route-id="@quiz.Id" class="btn-icon me-3 ms-auto">
                            <i class="fas fa-pencil icon-sm"></i>
                        </a>

                        <a href="#" class="btn-icon" data-bs-toggle="modal" data-bs-target="#deleteQuizPopup"
                            data-quiz-name="@quiz.Name" data-on-delete="deleteQuiz(@quiz.Id)">
                            <i class="far fa-trash-can icon-sm"></i>
                        </a>
                    </div>

                    <a href="#" class="btn btn-primary mt-auto" data-bs-toggle="modal" data-bs-target="#publishPopup"
                       data-quiz-id="@quiz.Id" data-quiz-name="@quiz.Name" data-callback-name="publish">
                        Opublikuj
                    </a>
                </div>
            </div>
        }

        <a asp-page="Creator" class="no-style">
            <div class="quiz quiz-add rounded d-flex justify-content-center align-items-center">
                <i class="fas fa-plus me-1"></i>
                
                <span class="fw-bold">Utwórz nowy quiz</span>
            </div>
        </a>

        @*TODO: Remove this*@
        @* <a href="#" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#assignPopup"
           data-quiz-id="3" data-quiz-name="Dummy quiz" data-pin="069 420"
           data-url="https://harmony.io/join?q=069420"
           data-emails='["email1@example.com", "email2@example.com"]'
           data-all-groups='["Klasa 2A", "Klasa 3A", "Klasa 1B"]'
           data-added-groups='["Klasa 3A"]' data-callback-name="assign">
            Test Assign
        </a> *@

        @*TODO: Remove this*@
        @* <a href="#" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#publishPopup"
           data-quiz-id="3" data-quiz-name="Dummy quiz" data-callback-name="publish">
            Test Publish
        </a> *@
    </div>
</div>

<partial name="~/Pages/Shared/DeleteQuizPopup.cshtml" />
<partial name="~/Pages/Shared/PublishPopup.cshtml" />
<partial name="~/Pages/Shared/AssignPopup.cshtml" />

<script>
    function deleteQuiz(quizId) {
        document.getElementById(`deleteFormForQuiz${quizId}`).submit();
    }

    function publish(quizId, openDateTime, closeDateTime) {
        //TODO: Publish this quiz (open i close date są validowane w popupie, ale dobrze zrobić to jeszcze raz na backendzie)

        document.getElementById(`openDateForQuiz${quizId}`).value = openDateTime;
        document.getElementById(`closeDateForQuiz${quizId}`).value = closeDateTime;
        document.getElementById(`publishFormForQuiz${quizId}`).submit();

        console.log("publishing quiz: " + quizId);
        console.log("open datetime: " + openDateTime);
        console.log("close datetime: " + closeDateTime);

        //TODO: Po opublikowaniu powinien od razu włączyć się assign popup
        // (można go włączyć przyciskiem Udostępnij, ale dobrze jakby włączał się też automatycznie)
    }

    async function assign(quizId, assignedEmails, assignedGroups) {
        //TODO: Assign this quiz to users

        document.getElementById(`emailsForQuiz${quizId}`).value = assignedEmails;
        document.getElementById(`groupsForQuiz${quizId}`).value = JSON.stringify(assignedGroups);
        form = document.getElementById(`assignFormForQuiz${quizId}`);

        const formData = new FormData(form);
      

        console.log("assigned quiz: " + quizId);
        console.log("assigned users: " + assignedEmails);
        console.log("assigned groups: " + assignedGroups);

        try {

            const response = await fetch(form.action, {
                method: form.method,
                body: formData,
                redirect: 'follow'
            });

            // Handle Forbidden (403) response
            if (response.status === 403) {
                window.location.href = '/Identity/Account/Login';
                return null;
            }

            // Handle redirect responses
            if (response.redirected) {
                window.location.href = response.url;
                return null;
            }

            // Handle JSON responses (for normal operation)
            if (response.headers.get('content-type')?.includes('application/json')) {
                const result = await response.json();

                if (result.notFoundEmails) {
                    return result.notFoundEmails;
                }

                if (result.success) {
                    console.log('Users added successfully');
                    return null;
                }
            }

            return null;

        }
        catch (error) {
            console.error('An error occurred:', error);
        }

        return null;
    }

</script>
