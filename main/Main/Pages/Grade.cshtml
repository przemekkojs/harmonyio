@page
@model Main.Pages.GradeModel
@using Main.Enumerations;
@using JsonConvert = Newtonsoft.Json.JsonConvert;
@{
    ViewData["Title"] = "Harmony.io - Oceń quiz";
}

<head>
    <link rel="stylesheet" href="~/css/grade-style.css" />
</head>

<div class="h-100 w-100 d-flex pb-3 overflow-auto">
    @* hidden form *@
    <form method="post" id="gradeForm" class="d-flex flex-row w-100">
        <input type="hidden" asp-for="QuizId" value="@Model.QuizId" />

        @for (int i = 0; i < Model.Users.Count; i++)
        {
            <input id="grade-hidden-@i" type="hidden" asp-for="Grades[i]" />
        }

        @for (int userIndex = 0; userIndex < Model.Users.Count; userIndex++)
        {
            @for (int exerciseIndex = 0; exerciseIndex < Model.Exercises.Count; exerciseIndex++)
            {
                <input id="points-hidden-@exerciseIndex-@userIndex" type="hidden" asp-for="Points[userIndex][exerciseIndex]"
                    value="@Model.Points[userIndex][exerciseIndex]" />
                <input id="comment-hidden-@exerciseIndex-@userIndex" type="hidden" asp-for="Comments[userIndex][exerciseIndex]"
                    value="@Model.Comments[userIndex][exerciseIndex]" />
            }
        }

        @for (int i = 0; i < Model.Users.Count; i++)
        {
            <input type="hidden" asp-for="UserIds[i]" value="@Model.UserIds[i]" />
        }

        <div class="sidebar d-flex flex-column bg-white shadow rounded pb-3 me-3">
            <div class="fw-bold fs-4 overflow-hidden p-3 flex-shrink-0" style="text-overflow: ellipsis;">
                @Model.QuizName
            </div>

            <hr class="m-0" />

            <div class="overflow-auto flex-grow-1 p-3">
                @for (int i = 0; i < Model.Users.Count; i++)
                {
                    <div onclick="selectUser(@i)"
                        class="member-row d-flex flex-row @(i != Model.Users.Count - 1 ? "mb-2" : "")">
                        <div
                            class="member-div member-name flex-grow-1 rounded d-flex align-items-center p-2 me-2 overflow-hidden">
                            @Model.Users[i].FullName
                        </div>
                        <div id="user-grade-@i"
                            class="member-div member-grade rounded d-flex align-items-center justify-content-center p-2">
                            -
                        </div>
                    </div>
                }
            </div>

            <hr class="m-0 mb-3" />
            <a class="btn btn-outline-primary btn-std-width mx-auto" 
                data-bs-toggle="modal" data-bs-target="#helpPopup" data-header="Ocenianie quizu"
                data-text="<p>Znajdujesz się aktualnie w ekranie oceny quizu. Ekran podzielony jest na kilka głównych paneli: lewy, prawy-górny oraz prawy-dolny.</p><p>Lewy panel dotyczy całego quizu. Na samej górze widoczna jest tam jego nazwa, a pod nią lista wszystkich uczestników quizu, którzy nadesłali rozwiązania. Możesz wybierać z tej listy kolejnych uczestników, aby skupić się na ich rozwiązaniach i móc je ocenić. Zawartość paneli z prawej strony dostosuje się do twojego wyboru.</p><p>Prawy-górny panel dotyczy rozwiązań wybranego użytkownika. Podzielony jest on dodatkowo na dwie podsekcje - górną i dolną. W górnej podsekcji widoczna jest nazwa ocenianego użytkownika, jego całościowy wynik za quiz (wyliczany jako suma wyników za każde z zadań) oraz jego ocena, którą można edytować. Dolna podsekcja dotyczy rozwiązań konkretnych zadań. O ile w quizie występuje więcej niż jedno zadanie, możemy przechodzić po nich za pomocą przycisków z lewej strony sekcji.  Z prawej strony widoczna jest sugestia algorytmu, co do punktacji wybranego zadania, dla wybranego uczestnika oraz rzeczywista punktacja, którą możemy uzupełnić. Dodatkowo, za pomocą przycisku „Komentarz” jesteś w stanie dodać komentarz do tego konkretnego zadania dla wybranego uczestnika</p><p>Prawy-dolny panel skupia się na rozwiązaniu wybranego zadania, przez wybranego użytkownika. Na samej górze widoczne jest polecenie do zadania (o ile zostało one dodane) oraz przyciski umożliwiające dźwiękowe odtworzenie go. Poniżej, na pięciolinii zaprezentowane jest rozwiązanie uczestnika, a pod nim opinia algorytmu sprawdzającego na jego temat.</p><p>Po ocenieniu wszystkich uczestników możesz wybrać czy chcesz dzielić się z nimi opiniami algofrymu za pomocą pola wyboru na dole lewego panelu. Po wszystkim zostaje już tylko zapisać oceny.</p>">           
                <i class="far fa-circle-question"></i>
                Pomoc
            </a>
            <hr class="m-0 my-3" />

            <div class="d-flex flex-row px-3 mb-3">
                <input asp-for="ShareAlgorithmOpinion" type="checkbox" class="form-check-input me-2">
                <span class="text-secondary">Udostępnij uwagi algorytmu</span>
            </div>

            <button onclick="submitFormClicked()" class="btn btn-primary btn-std-width mt-auto mx-auto">
                Zapisz oceny
            </button>

            <a href="#" class="btn btn-danger btn-std-width mt-2 mx-auto" data-bs-toggle="modal"
                data-bs-target="#confirmLeaveModal" data-confirm-redirect="/Created">
                Wyjdź
            </a>
        </div>

        <div class="flex-grow-1 d-flex flex-column overflow-auto ">
            <div class="bg-white rounded shadow mb-3 d-flex flex-column justify-content-between">
                <div class="d-flex align-items-center h-100 p-3">
                    <div id="current-user-text" class="fw-bold fs-4">
                        @*SET VIA JS*@
                    </div>

                    <span class="fw-bold ms-auto me-2">Wynik</span>
                    <div id="points-text"
                        class="bg-light border border-secondary text-secondary rounded fw-bold px-2 py-1 me-2 text-nowrap h-100 align-items-center d-flex">
                        @*SET VIA JS*@
                    </div>
                    <div id="percentage-text"
                        class="bg-light border border-secondary text-secondary rounded fw-bold px-2 py-1 me-4 h-100 align-items-center d-flex">
                        @*SET VIA JS*@
                    </div>
                    <span class="fw-bold me-2">Ocena</span>
                    <select id="grade-select"
                        onchange="onGradeChange(this.value, this.options[this.selectedIndex].text)"
                        class="grade-select bg-transparent form-select border border-secondary text-secondary"
                        aria-label="Wybierz ocenę">
                        <option selected value="">-</option>
                        @foreach (Grade grade in Enum.GetValues(typeof(Grade)))
                        {
                            <option value="@grade">@grade.AsString()</option>
                        }
                    </select>
                </div>

                <hr class="m-0" />

                <div class="d-flex flex-row align-items-center p-3">
                    <div id="exercises-buttons" class="d-flex flex-row align-items-center">
                        @*SET VIA JS*@
                    </div>

                    <div id="div-last-ex">
                        <img src="~/images/three_dots.png" alt="Three dots" class="ms-2 three-dots-img">
                        <button id="btn-last-ex" type="button" onclick="lastQuestion()"
                            class="btn btn-outline-secondary btn-tiny-width p-1 ms-2"></button>
                    </div>

                    @* Punkty sugerowane przez algorytm *@
                    <span class="fw-bold ms-auto me-2">Sugestia</span>
                    <div type="number" id="suggestion" style="width: 50px;"
                        class="bg-light text-center fw-bold border border-secondary text-secondary rounded px-2 py-1 align-items-center justify-content-center d-flex h-100"
                        readonly>
                        @*SET VIA JS*@
                    </div>

                    @* Punkty nauczyciela *@
                    <span class="fw-bold ms-3 me-2">Punkty</span>
                    <input type="number" id="points" style="width: 50px;" onchange="onPointsChange(this.value)"
                        onKeyPress="integerKeyPress(event)"
                        class="form-control points-input border-secondary bg-white" />

                    @* Max punktów za zadanie *@
                    <span class="fw-bold ms-3 me-2">Max</span>
                    <div id="max" style="width: 50px;"
                        class="bg-light fw-bold border border-secondary text-secondary rounded px-2 py-1 align-items-center justify-content-center d-flex d-flex h-100">
                        @*SET VIA JS*@
                    </div>


                    <a href="#" class="ms-3 btn btn-secondary" data-bs-toggle="modal" data-bs-target="#commentPopup">
                        Komentarz
                    </a>
                </div>
            </div>

            <div class="flex-grow-1 bg-white rounded shadow d-flex flex-column p-3 overflow-auto"
                id="staff-section-div">
                <div class="flex-grow-1 d-flex flex-row justify-content-between align-items-start" id="question-area">
                    <p class="m-0 me-3 fw-semibold" id="question">
                        @* FILLED VIA JS *@
                    </p>

                    <div id="playback-area" class="d-flex">
                        <span class="ms-auto fw-semibold">Odtwórz</span>
                        <button id="play-file" type="button" class="btn-icon">
                            <i class="fas fa-play icon-sm"></i>
                        </button>
                        <button id="stop-file" type="button" class="btn-icon">
                            <i class="fas fa-stop icon-sm"></i>
                        </button>
                    </div>
                </div>


                <div id="music-staff-div" class="flex-grow-1 d-flex flex-row bg-white rounded mt-3">
                    <div id="p5_loading">Ładowanie rozwiązania</div>
                    @*SET VIA JS*@
                </div>

                <div id="algorithm-opinions" style="width: 100%; height: 100%; margin-bottom: -1rem;">
                    @*SET VIA JS*@
                </div>
            </div>
        </div>


    </form>
</div>

<div class="modal fade" id="commentPopup" tabindex="-1" role="dialog" aria-labelledby="deletePopupCenterTitle"
    aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title fw-bold fs-4" id="deletePopupLongTitle">Komentarz</h5>
                <button type="button" class="ms-auto btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <textarea id="comment" rows="8" placeholder="Dodaj komentarz..." onchange="onCommentChange(this.value)"
                    class="form-control"></textarea>
            </div>
            <div class="modal-footer justify-content-center align-items-center">
                <button type="button" class="btn btn-secondary btn-sm-width focus-ring"
                    data-bs-dismiss="modal">Zapisz</button>
            </div>
        </div>
    </div>
</div>
<partial name="~/Pages/Shared/ConfirmLeavePopup.cshtml" />

<partial name="~/Pages/Shared/HelpPopup.cshtml" />

<script>
    const fontUrl = '@Url.Content("~/fonts/Inconsolata.otf")';
    const staffSectionDiv = document.getElementById("staff-section-div");
    const staffSectionWidth = staffSectionDiv.offsetWidth - 60;
    let canvasWidth = staffSectionWidth;
    let canvasHeight = 800;

    const symbolPaths = {
        curlyBrace: '@Url.Content("~/images/staff-symbols/curly-brace.png")',
        bassKey: '@Url.Content("~/images/staff-symbols/bass-key.png")',
        violinKey: '@Url.Content("~/images/staff-symbols/violin-key.png")',
        bemol: '@Url.Content("~/images/staff-symbols/bemol.png")',
        doubleBemol: '@Url.Content("~/images/staff-symbols/double-bemol.png")',
        sharp: '@Url.Content("~/images/staff-symbols/sharp.png")',
        doubleSharp: '@Url.Content("~/images/staff-symbols/double-sharp.png")',
        natural: '@Url.Content("~/images/staff-symbols/natural.png")',
        fullNote: '@Url.Content("~/images/staff-symbols/full-note.png")',
        noteHeadClosed: '@Url.Content("~/images/staff-symbols/note-head-closed.png")',
        noteHeadOpened: '@Url.Content("~/images/staff-symbols/note-head-opened.png")',
        noteFlag: '@Url.Content("~/images/staff-symbols/note-flag.png")',
        mouse: '@Url.Content("~/images/staff-symbols/mouse.png")',
        noteReverse: '@Url.Content("~/images/staff-symbols/note-reverse.png")',
        thrashCan: '@Url.Content("~/images/staff-symbols/thrash-can.png")',
        thrashCanCrossed: '@Url.Content("~/images/staff-symbols/thrash-can-crossed.png")',
    };

    const questionsRaw = @Html.Raw(JsonConvert.SerializeObject(Model.Exercises.Select(e => e.Question)));
    const questions = questionsRaw.map(q => JSON.parse(q));
    const userSolutions = @Html.Raw(JsonConvert.SerializeObject(Model.Solutions));

    let currentUserIndex = 0;
    let currentQuestionIndex = 0;

    function getCurrentSolution() {
        return userSolutions[currentUserIndex][currentQuestionIndex];
    }
</script>

<script src="~/lib/p5/p5.min.js"></script>
<script src="~/js/staff-scripts/constants.js"></script>
<script src="~/js/staff-scripts/symbols.js"></script>
<script src="~/js/staff-scripts/bar.js"></script>
<script src="~/js/staff-scripts/vertical.js"></script>
<script src="~/js/staff-scripts/twoNotes.js"></script>
<script src="~/js/staff-scripts/functionSymbol.js"></script>
<script src="~/js/staff-scripts/note.js"></script>
<script src="~/js/staff-scripts/keySignature.js"></script>
<script src="~/js/staff-scripts/metre.js"></script>
<script src="~/js/staff-scripts/accidental.js"></script>
<script src="~/js/staff-scripts/staff.js"></script>
<script src="~/js/staff-scripts/sketchGrading.js"></script>

<script type='text/javascript' src='https://www.midijs.net/lib/midi.js'></script>

<script type="module">
    import { playTask } from "../js/midi-player-scripts/midiPlayer.js";

    const usernames = @Html.Raw(JsonConvert.SerializeObject(Model.Users.Select(u => u.FullName)));

    const userGrades = @Html.Raw(JsonConvert.SerializeObject(Model.Grades.Select(g => new[] { g?.ToString() ?? "-", g?.AsString() ?? "-" })));

    const userPoints = @Html.Raw(JsonConvert.SerializeObject(Model.Points));
    const userPointsSuggestions = @Html.Raw(JsonConvert.SerializeObject(Model.PointSuggestions));
    const userComments = @Html.Raw(JsonConvert.SerializeObject(Model.Comments));
    const userOpinions = @Html.Raw(JsonConvert.SerializeObject(Model.Opinions));

    const exerciseMaxes = @Html.Raw(JsonConvert.SerializeObject(Model.Exercises.Select(e => e.MaxPoints)));
    const maxesSum = @Model.Exercises.Select(e => e.MaxPoints).Sum();

    const memberRows = Array.from(document.querySelectorAll('div.member-row'));
    const currentUserText = document.getElementById("current-user-text");
    const pointsText = document.getElementById("points-text");
    const percentageText = document.getElementById("percentage-text");
    const gradeSelect = document.getElementById("grade-select");
    const questionElement = document.getElementById("question");
    const exerciseNumberElement = document.getElementById("exerciseNumber");
    const pointsElement = document.getElementById("points");
    const suggestionElement = document.getElementById("suggestion");
    const maxElement = document.getElementById("max");
    const commentElement = document.getElementById("comment");

    let midiPlay = document.getElementById('play-file');
    let midiStop = document.getElementById('stop-file');

    for (let i = 0; i < @Model.Users.Count; i++) {
        if (userGrades[i][0] != "-") {
            document.getElementById(`user-grade-${i}`).innerText = userGrades[i][1];
            document.getElementById(`grade-hidden-${i}`).value = userGrades[i][0];
        } else {
            document.getElementById(`user-grade-${i}`).innerText = "-";
        }
    }

    window.loadUser = function (index, loadToGrandStaff = true) {
        handleMembersList(index);
        handleTotalPoints(index);

        currentUserText.innerText = usernames[index];

        if (userGrades[index][0] === '-') {
            gradeSelect.value = "";
        } else {
            gradeSelect.value = userGrades[index][0];
        }

        loadQuestion(0, loadToGrandStaff);
    }

    window.handleTotalPoints = function (index) {
        const totalPoints = getUserTotalPoints(index);
        pointsText.innerText = totalPoints + " / " + maxesSum;
        percentageText.innerText = Math.round((totalPoints / maxesSum) * 100) + "%";
    }

    window.handleMembersList = function (index) {
        const currentMemberRow = memberRows.filter(div => div.textContent.includes(usernames[index]))[0];
        const otherMembersRow = memberRows.filter(div => div != currentMemberRow);

        currentMemberRow.classList.add("focused-member");
        currentMemberRow.classList.remove('unfocused-member');

        otherMembersRow.forEach(div => {
            div.classList.add('unfocused-member');
            div.classList.remove('focused-member');
        });
    }

    window.selectUser = function (index) {
        currentUserIndex = index;
        loadUser(currentUserIndex);
    }

    window.getUserTotalPoints = function (userIndex) {
        let totalPoints = 0;
        const points = userPoints[userIndex];
        points.forEach(num => {
            totalPoints += num;
        });
        return totalPoints;
    }

    window.onGradeChange = function (value, strValue) {
        userGrades[currentUserIndex] = [value, strValue];
        document.getElementById(`user-grade-${currentUserIndex}`).innerText = strValue;
        document.getElementById(`grade-hidden-${currentUserIndex}`).value = value;
    }

    window.onPointsChange = function (value) {
        let numValue = Number(value);
        const maxValue = exerciseMaxes[currentQuestionIndex];

        if (value === "") {
            numValue = userPointsSuggestions[currentUserIndex][currentQuestionIndex];
            document.getElementById(`points`).value = numValue;
        }
        if (numValue > maxValue) {
            numValue = maxValue;
            document.getElementById(`points`).value = numValue;
        }

        userPoints[currentUserIndex][currentQuestionIndex] = numValue;
        document.getElementById(`points-hidden-${currentQuestionIndex}-${currentUserIndex}`).value = numValue;

        handleTotalPoints(currentUserIndex);
    }

    window.onCommentChange = function (value) {
        userComments[currentUserIndex][currentQuestionIndex] = value;
        document.getElementById(`comment-hidden-${currentQuestionIndex}-${currentUserIndex}`).value = value;
    }

    window.integerKeyPress = function (e) {
        if (!/\d/.test(e.key)) {
            e.preventDefault();
        }
    }

    window.loadQuestion = function (index, loadToGrandStaff = true) {
        if (index >= 0 && index < questions.length) {
            currentQuestionIndex = index;

            if (questions[currentQuestionIndex].question == '')
                questionElement.innerText = 'Brak polecenia dla tego zadania';
            else
                questionElement.innerText = questions[currentQuestionIndex].question;

            const points = userPoints[currentUserIndex][currentQuestionIndex];
            const maxPoints = exerciseMaxes[currentQuestionIndex];
            const pointsSuggestion = userPointsSuggestions[currentUserIndex][currentQuestionIndex];
            const comment = userComments[currentUserIndex][currentQuestionIndex];
            const opinion = userOpinions[currentUserIndex][currentQuestionIndex] === "" ?
                "Brak błędów" : userOpinions[currentUserIndex][currentQuestionIndex];

            document.getElementById('algorithm-opinions').innerHTML = `
                <details>
                    <summary>Opinia algorytmu</summary>
                    ${opinion}
                </details>
            `;

            suggestionElement.innerText = pointsSuggestion;
            pointsElement.placeholder = pointsSuggestion;
            pointsElement.value = points;
            maxElement.innerText = maxPoints;

            if (loadToGrandStaff) {
                grandStaff.loadFromJson(questions[currentQuestionIndex], userSolutions[currentUserIndex][currentQuestionIndex])
            }

            commentElement.value = comment;

            updateListeners(currentQuestionIndex);
            generateButtons(currentQuestionIndex);
        }
    }

    const maxVisibleButtons = 9;
    const targetVisibleOneSide = Math.floor(maxVisibleButtons / 2)

    window.generateButtons = function (index) {
        let questionButtonsContainer = document.getElementById("exercises-buttons");
        questionButtonsContainer.innerHTML = '';

        if (questions.length == 1) {
            document.getElementById("div-last-ex").style.display = "none";
            return;
        }

        let start = Math.max(index - targetVisibleOneSide, 0);
        let end = Math.min(index + targetVisibleOneSide, questions.length - 1);

        let missingStart = start - (index - targetVisibleOneSide);
        let missingEnd = (index + targetVisibleOneSide) - end;

        if (missingStart > 0 && missingEnd == 0) {
            end = Math.min(end + missingStart, questions.length - 1);
        }
        else if (missingEnd > 0 && missingStart == 0) {
            start = Math.max(start - missingEnd, 0);
        }

        if (end == questions.length - 2) {
            end++;
        }

        for (let i = start; i <= end; i++) {
            let button = document.createElement("input");
            button.type = 'button';
            button.className = "btn " + (i === index ? "btn-secondary btn-current" : "btn-outline-secondary btn-hidable") + " btn-tiny-width p-1";
            button.value = i + 1;

            button.onclick = (function (i) {
                return function () {
                    loadQuestion(i);
                };
            })(i);

            questionButtonsContainer.appendChild(button);

            if (i !== start) {
                button.classList.add("ms-2");
            }
        }

        document.getElementById("btn-last-ex").innerText = questions.length;
        document.getElementById("div-last-ex").style.display = end < questions.length - 1 ? 'inline-block' : 'none';
    }

    loadUser(currentUserIndex, false);

    window.submitFormClicked = function () {
        document.getElementById("gradeForm").submit();
    }

    // DLA MIDI:
    function playAnswer() {
        return () => playTask(
            userSolutions[currentUserIndex][currentQuestionIndex], currentQuestionIndex
        );
    }

    function stopMidi() {
        MIDIjs.stop();
    }

    function updateListeners(index) {
        midiPlay.replaceWith(midiPlay.cloneNode(true));
        midiStop.replaceWith(midiStop.cloneNode(true));

        midiPlay = document.getElementById('play-file');
        midiStop = document.getElementById('stop-file');

        midiPlay.addEventListener('click', playAnswer());
        midiStop.addEventListener('click', stopMidi);
    }
</script>