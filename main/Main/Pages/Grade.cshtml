@page
@model Main.Pages.GradeModel
@using Main.Enumerations;
@using JsonConvert = Newtonsoft.Json.JsonConvert;

<head>
    <link rel="stylesheet" href="~/css/grade-style.css" />
</head>

<form method="post" class="h-100 w-100 d-flex flex-column overflow-auto">
    <div class="flex-grow-1 d-flex mb-3 overflow-auto">
        <div class="sidebar d-flex flex-column bg-white shadow rounded py-3 me-3">
            <input type="hidden" asp-for="QuizId" value="@Model.Quiz.Id" />
            <div class="fw-bold fs-4 overflow-hidden px-3 flex-shrink-0" style="text-overflow: ellipsis;">
                @Model.Quiz.Name
            </div>

            <hr class="m-0 mt-3" />

            <div class="overflow-auto flex-grow-1 p-3">
                @for (int i = 0; i < Model.Users.Count; i++)
                {
                    <div onclick="selectUser(@i)" class="student-row d-flex flex-row @(i != Model.Users.Count - 1 ? "mb-2" : "")">
                        <div class="student-div student-name flex-grow-1 rounded d-flex align-items-center p-2 me-2 overflow-hidden">
                            @Model.Users[i].FullName
                        </div>
                        <div id="user-grade-@i"
                             class="student-div student-grade rounded d-flex align-items-center justify-content-center p-2">
                            -
                        </div>
                    </div>
                }
            </div>

            <hr class="m-0 mb-3" />

            <button type="submit" class="btn btn-primary btn-std-width mt-auto mx-auto">Zapisz oceny</button>
            <a asp-page="Created" class="btn btn-danger btn-std-width mt-2 mx-auto">Wyjdź</a>
        </div>

        <div class="flex-grow-1 d-flex flex-column overflow-auto ">
            <div class="bg-white rounded shadow d-flex flex-column mb-3 p-3">
                <div class="d-flex justify-content-between align-items-center">
                    <div id="current-user-text" class="fw-bold fs-4">
                        @*SET VIA JS*@
                    </div>

                    <div class="d-flex align-items-center h-100">
                        <span class="fw-bold me-2">Wynik</span>
                        <div id="points-text" class="border border-secondary text-secondary rounded fw-bold px-2 py-1 me-2 text-nowrap h-100 align-items-center d-flex">
                            @*SET VIA JS*@
                        </div>
                        <div id="percentage-text" class="border border-secondary text-secondary rounded fw-bold px-2 py-1 me-4 h-100 align-items-center d-flex">
                            @*SET VIA JS*@
                        </div>
                        <span class="fw-bold me-2">Ocena</span>
                        <select id="grade-select"
                                onchange="onGradeChange(this.value, this.options[this.selectedIndex].text)"
                                class="grade-select bg-transparent form-select border border-secondary text-secondary"
                                aria-label="Wybierz ocenę">
                            <option selected disabled>-</option>
                            @foreach (Grade grade in Enum.GetValues(typeof(Grade)))
                            {
                                <option value="@grade">@grade.AsString()</option>
                            }
                        </select>

                        @for (int i = 0; i < Model.Users.Count; i++)
                        {
                            <input id="grade-hidden-@i" type="hidden" asp-for="Grades[i]" />
                        }
                    </div>

                    <hr class="my-3" />

                    <div class="d-flex flex-row align-items-center">
                        <div id="excersises-buttons" class="d-flex flex-row align-items-center">
                        </div>
                        <div id="div-last-ex">
                            <img src="~/images/three_dots.png" alt="Three dots" class="ms-2 three-dots-img">
                            <button id="btn-last-ex" type="button" onclick="lastQuestion()"
                                    class="btn btn-outline-secondary btn-tiny-width p-1 ms-2"></button>
                        </div>

                        <span class="fw-bold ms-auto me-2">Punkty</span>
                        <input type="number" id="points" onchange="onPointsChange(this.value)"
                               onKeyPress="integerKeyPress(event)"
                               class="form-control points-input border-secondary bg-white" />

                        <span class="fw-bold ms-3 me-2">Max</span>
                        <input type="number" id="max" onchange="onMaxChange(this.value)"
                               onKeyPress="integerKeyPress(event)"
                               class="form-control points-input border-secondary bg-white" />

                        <a href="#" class="ms-3 btn btn-secondary" data-bs-toggle="modal" data-bs-target="#commentPopup">
                            Komentarz
                        </a>
                    </div>
                </div>

                <div class="flex-grow-1 bg-white rounded shadow d-flex flex-column p-3 overflow-auto">
                    <div class="flex-grow-1" id="question-area">
                        <p class="m-0 fw-semibold" id="question">
                            @* FILLED VIA JS *@
                        </p>
                    </div>

                    <div class="mt-3 d-flex flex-row">
                       
                        @for (int exId = 0; exId < Model.Excersises.Count; exId++)
                        {
                            @for (int usrId = 0; usrId < Model.Users.Count; usrId++)
                            {
                                <input id="points-hidden-@exId-@usrId" type="hidden" asp-for="Points[usrId][exId]" value="0" />
                                <input id="max-hidden-@exId-@usrId" type="hidden" asp-for="Maxes[usrId][exId]" value="0" />
                                <input id="comment-hidden-@exId-@usrId" type="hidden" asp-for="Comments[usrId][exId]" value="" />
                            }
                        }

                        <div id="music-staff-div" class="flex-grow-1 h-100 d-flex justify-content-center align-items-center">
                            @* MUSIC STAFF DIV SET VIA JS *@
                        </div>

                    </div>
                    @* TODO: Stylowanie trochę porządniej XD *@
                    <div id="algorithm-opinions" style="width: 100%; height: 100%;">

                    </div>
                </div>
            </div>
        </div>
</form>

<div class="modal fade" id="commentPopup" tabindex="-1" role="dialog" aria-labelledby="deletePopupCenterTitle" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title fw-bold fs-4" id="deletePopupLongTitle">Komentarz</h5>
                <button type="button" class="ms-auto btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <textarea id="comment" rows="8" placeholder="Dodaj komentarz..."
                          onchange="onCommentChange(this.value)"
                          class="form-control"></textarea>
            </div>
            <div class="modal-footer justify-content-center align-items-center">
                <button type="button" class="btn btn-secondary btn-sm-width focus-ring" data-bs-dismiss="modal">Zamknij</button>
            </div>
        </div>
    </div>
</div>


<script>
    const fontUrl = '@Url.Content("~/fonts/Inconsolata.otf")'

    const symbolPaths = {
        curlyBrace: '@Url.Content("~/images/staff-symbols/curly-brace.png")',
        bassKey: '@Url.Content("~/images/staff-symbols/bass-key.png")',
        violinKey: '@Url.Content("~/images/staff-symbols/violin-key.png")',
        bemol: '@Url.Content("~/images/staff-symbols/bemol.png")',
        doubleBemol: '@Url.Content("~/images/staff-symbols/double-bemol.png")',
        sharp: '@Url.Content("~/images/staff-symbols/sharp.png")',
        doubleSharp: '@Url.Content("~/images/staff-symbols/double-sharp.png")',
        natural: '@Url.Content("~/images/staff-symbols/natural.png")',
        fullNote: '@Url.Content("~/images/staff-symbols/full-note.png")',
        noteHeadClosed: '@Url.Content("~/images/staff-symbols/note-head-closed.png")',
        noteHeadOpened: '@Url.Content("~/images/staff-symbols/note-head-opened.png")',
        noteFlag: '@Url.Content("~/images/staff-symbols/note-flag.png")',
        mouse: '@Url.Content("~/images/staff-symbols/mouse.png")',
        noteReverse: '@Url.Content("~/images/staff-symbols/note-reverse.png")',
        thrashCan: '@Url.Content("~/images/staff-symbols/thrash-can.png")',
        thrashCanCrossed: '@Url.Content("~/images/staff-symbols/thrash-can-crossed.png")',
    };

    let canvasWidth = 978;
    let canvasHeight = 800;

    const questionsRaw = @Html.Raw(JsonConvert.SerializeObject(Model.Excersises.Select(e => e.Question)));
    const questions = questionsRaw.map(q => JSON.parse(q));
    const userSolutions = @Html.Raw(JsonConvert.SerializeObject(Model.Users.Select(u => Model.UsersToSolutions[u].Select(es => es.Answer))));
    const algorithmOpinions = null; //TODO;

    console.log(questions);
    console.log(userSolutions);

    let currentUserIndex = 0;
    let currentQuestionIndex = 0;

    function getCurrentSolution() {
        return userSolutions[currentUserIndex][currentQuestionIndex]
    }
</script>

<script src="~/lib/p5/p5.min.js"></script>
<script src="~/js/staff-scripts/constants.js"></script>
<script src="~/js/staff-scripts/symbols.js"></script>
<script src="~/js/staff-scripts/bar.js"></script>
<script src="~/js/staff-scripts/vertical.js"></script>
<script src="~/js/staff-scripts/twoNotes.js"></script>
<script src="~/js/staff-scripts/functionSymbol.js"></script>
<script src="~/js/staff-scripts/note.js"></script>
<script src="~/js/staff-scripts/keySignature.js"></script>
<script src="~/js/staff-scripts/metre.js"></script>
<script src="~/js/staff-scripts/accidental.js"></script>
<script src="~/js/staff-scripts/staff.js"></script>
<script src="~/js/staff-scripts/sketchGrading.js"></script>

<script>
    const usernames = @Html.Raw(JsonConvert.SerializeObject(Model.Users.Select(u => u.FullName)));
    const userScoreSuggestions = @Html.Raw(JsonConvert.SerializeObject(Model.Users.Select(u => Model.UsersToGradings[u])));

    const userScores = @(Model.Points == null ?
        Html.Raw(JsonConvert.SerializeObject(Model.Users.Select(u => Model.UsersToGradings[u]))) :
        Html.Raw(JsonConvert.SerializeObject(Model.Users.Select((u, index) => Model.Points[index].Zip(Model.Maxes[index], (x, y) => (x, y)).ToList())))
        );

    const userComments = @Html.Raw(JsonConvert.SerializeObject(Model.Comments))
            ?? Array.from({ length: usernames.length }, () => Array(@Model.Excersises.Count).fill(""));

    const userGrades = @Html.Raw(JsonConvert.SerializeObject(Model.Grades?.Select(g => new[] { g?.ToString() ?? "-", g?.AsString() ?? "-" }) ?? null))
            ?? Array.from({ length: usernames.length }, () => ["-", "-"]);

    const studentRows = Array.from(document.querySelectorAll('div.student-row'));
    const currentUserText = document.getElementById("current-user-text");
    const pointsText = document.getElementById("points-text");
    const percentageText = document.getElementById("percentage-text");
    const gradeSelect = document.getElementById("grade-select");
    const questionElement = document.getElementById("question");
    const excersiseNumberElement = document.getElementById("excersiseNumber");
    const suggestionElement = document.getElementById("suggestion");
    const pointsElement = document.getElementById("points");
    const maxElement = document.getElementById("max");
    const commentElement = document.getElementById("comment");

    for (let i = 0; i < @Model.Excersises.Count; i++) {
        for (let j = 0; j < @Model.Users.Count; j++) {
            document.getElementById(`points-hidden-${i}-${j}`).value = userScores[j][i].Item1;
            document.getElementById(`max-hidden-${i}-${j}`).value = userScores[j][i].Item2;
            document.getElementById(`comment-hidden-${i}-${j}`).value = userComments[j][i];
        }
    }
    for (let i = 0; i < @Model.Users.Count; i++) {
        if (userGrades[i][0] != "-") {
            document.getElementById(`user-grade-${i}`).innerText = userGrades[i][1];
            document.getElementById(`grade-hidden-${i}`).value = userGrades[i][0];
        }
    }

    function loadUser(index, loadToGrandStaff = true) {
        handleStudentsList(index);
        handleTotalPoints(index);

        currentUserText.innerText = usernames[index];
        gradeSelect.value = userGrades[index][0];

        loadQuestion(0, loadToGrandStaff);
    }

    function handleTotalPoints(index) {
        let [totalPoints, totalMax] = getUserTotalPointsAndMax(index);
        pointsText.innerText = totalPoints + " / " + totalMax;
        percentageText.innerText = Math.round((totalPoints / totalMax) * 100) + "%";
    }

    function handleStudentsList(index) {
        const currentStudentRow = studentRows.filter(div => div.textContent.includes(usernames[index]))[0];
        const otherStudentsRow = studentRows.filter(div => div != currentStudentRow);

        currentStudentRow.classList.add("focused-student");
        currentStudentRow.classList.remove('unfocused-student');

        otherStudentsRow.forEach(div => {
            div.classList.add('unfocused-student');
            div.classList.remove('focused-student');
        });
    }

    function selectUser(index) {
        currentUserIndex = index;
        loadUser(currentUserIndex);
    }

    function getUserTotalPointsAndMax(userIndex) {
        let totalPoints = 0;
        let totalMax = 0;

        let scores = userScores[userIndex];
        scores.forEach((score) => {
            totalPoints += score.Item1;
            totalMax += score.Item2;
        });

        return [totalPoints, totalMax];
    }

    function onGradeChange(value, strValue) {
        userGrades[currentUserIndex] = [value, strValue];
        document.getElementById(`user-grade-${currentUserIndex}`).innerText = strValue;
        document.getElementById(`grade-hidden-${currentUserIndex}`).value = value;
    @* document.getElementById("grades-validation-text").innerText = ''; *@
        }

    function onPointsChange(value) {
        let numValue = Number(value);
        let maxValue = Number(userScores[currentUserIndex][currentQuestionIndex].Item2);

        if (value === "") {
            numValue = userScoreSuggestions[currentUserIndex][currentQuestionIndex].Item1;
            document.getElementById(`points`).value = numValue;
        }
        if (numValue > maxValue) {
            numValue = maxValue;
            document.getElementById(`points`).value = numValue;
        }

        userScores[currentUserIndex][currentQuestionIndex].Item1 = numValue;
        document.getElementById(`points-hidden-${currentQuestionIndex}-${currentUserIndex}`).value = numValue;

        handleTotalPoints(currentUserIndex);
    }

    function onMaxChange(value) {
        let numValue = Number(value);

        if (value === "") {
            numValue = userScoreSuggestions[currentUserIndex][currentQuestionIndex].Item2;
            document.getElementById(`max`).value = numValue;
        }

        userScores[currentUserIndex][currentQuestionIndex].Item2 = numValue;
        document.getElementById(`max-hidden-${currentQuestionIndex}-${currentUserIndex}`).value = numValue;

        handleTotalPoints(currentUserIndex);
    }

    function onCommentChange(value) {
        userComments[currentUserIndex][currentQuestionIndex] = value;
        document.getElementById(`comment-hidden-${currentQuestionIndex}-${currentUserIndex}`).value = value;
    }

    function integerKeyPress(e) {
        if (!/\d/.test(e.key)) {
            e.preventDefault();
        }
    }


    function loadQuestion(index, loadToGrandStaff = true) {
        if (index >= 0 && index < questions.length) {
            currentQuestionIndex = index;

            questionElement.innerText = questions[currentQuestionIndex].question;
            if (questions[currentQuestionIndex].question == '')
                document.getElementById('question-area').classList.add('d-none');
            else
                document.getElementById('question-area').classList.remove('d-none');

            let score = userScores[currentUserIndex][currentQuestionIndex];
            let scoreSuggestions = userScoreSuggestions[currentUserIndex][currentQuestionIndex];
            let opinion = scoreSuggestions.Item3;

            document.getElementById('algorithm-opinions').innerHTML = opinion;

            pointsElement.placeholder = scoreSuggestions.Item1;
            maxElement.placeholder = scoreSuggestions.Item2;
            pointsElement.value = score.Item1;
            maxElement.value = score.Item2;
            //solutionElement.innerText = userSolutions[currentUserIndex][currentQuestionIndex];

            if (loadToGrandStaff) {
                grandStaff.loadFromJson(questions[currentQuestionIndex], userSolutions[currentUserIndex][currentQuestionIndex])
            }

            commentElement.value = userComments[currentUserIndex][currentQuestionIndex];

            generateButtons(currentQuestionIndex);
        }
    }

    const maxVisibleButtons = 9;
    const targetVisibleOneSide = Math.floor(maxVisibleButtons / 2)
    function generateButtons(index) {
        let questionButtonsContainer = document.getElementById("excersises-buttons");
        questionButtonsContainer.innerHTML = '';

        let start = Math.max(index - targetVisibleOneSide, 0);
        let end = Math.min(index + targetVisibleOneSide, questions.length - 1);

        let missingStart = start - (index - targetVisibleOneSide);
        let missingEnd = (index + targetVisibleOneSide) - end;

        if (missingStart > 0 && missingEnd == 0) {
            end = Math.min(end + missingStart, questions.length - 1);
        }
        else if (missingEnd > 0 && missingStart == 0) {
            start = Math.max(start - missingEnd, 0);
        }

        if (end == questions.length - 2) {
            end++;
        }

        for (let i = start; i <= end; i++) {
            let button = document.createElement("button");
            button.className = "btn " + (i === index ? "btn-secondary btn-current" : "btn-outline-secondary btn-hidable") + " btn-tiny-width p-1";
            button.innerText = i + 1;

            button.onclick = (function (i) {
                return function () {
                    currentIndex = i;
                    loadQuestion(currentIndex);
                };
            })(i);

            questionButtonsContainer.appendChild(button);

            if (i !== start) {
                button.classList.add("ms-2");
            }
        }

        document.getElementById("btn-last-ex").innerText = questions.length;
        document.getElementById("div-last-ex").style.display = end < questions.length - 1 ? 'inline-block' : 'none';
    }

    loadUser(currentUserIndex, false);

</script>
