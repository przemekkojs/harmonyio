@page
@model Main.Pages.BrowseModel
@using Main.Enumerations;
@using JsonConvert = Newtonsoft.Json.JsonConvert;
@{
    ViewData["Title"] = "Harmony.io - Przeglądaj";

    var totalPoints = Model.ExerciseResults.Sum(er => er.Points);
    var totalMax = Model.ExerciseResults.Sum(er => er.MaxPoints);
    var percent = Math.Round((totalPoints / (float)totalMax) * 100);
}

<head>
    <link rel="stylesheet" href="~/css/browse-style.css" />
</head>

<div class="h-100 w-100 d-flex flex-row pb-3">
    <div class="bg-white rounded d-flex flex-column bor shadow py-3 me-3 sidebar">
        <div class="fw-bold fs-4 overflow-hidden flex-shrink-0 px-3" style="text-overflow: ellipsis;">
            @Model.Quiz.Name
        </div>

        <hr />

        <div class="d-flex flex-row px-3">
            <div class="d-flex flex-column me-4">
                <span class="fw-semibold">Ocena</span>
                <div class="d-flex flex-row align-items-center mt-1">
                    <div class="border border-secondary rounded text-secondary fw-bold px-2 py-1">
                        @Model.GradeString
                    </div>
                </div>
            </div>

            <div class="d-flex flex-column">
                <span class="fw-semibold">Wynik</span>
                <div class="d-flex flex-row align-items-center mt-1">
                    <div class="border border-secondary text-nowrap text-secondary fw-bold rounded px-2 py-1 me-2">
                        @totalPoints / @totalMax
                    </div>
                    <div class="border border-secondary text-secondary fw-bold rounded px-2 py-1">
                        @(percent)%
                    </div>
                </div>
            </div>
        </div>

        <hr class="mb-0" />

        <div id="exercises-buttons" class="w-100 mt-1 mb-auto p-3"
            style="display: grid; grid-template-columns: repeat(auto-fill, minmax(30px, 1fr)); gap: 5px;">
            @* FILLED VIA JS *@
        </div>

        <hr class="m-0 mb-3" />
        <a class="btn btn-outline-primary btn-std-width mx-auto" 
            data-bs-toggle="modal" data-bs-target="#helpPopup" data-header="Przeglądanie ocenionego quizu"
            data-text="<p>Znajdujesz się aktualnie w ekranie przeglądania ocenionego quizu. Ekran podzielony jest na trzy główne panele: lewy, prawy-górny oraz prawy-dolny</p><p>Lewy panel skupia się na całości quizu. Jest na nim widoczna jego nazwa oraz twoja całościowa ocena i punktacja. Jeżeli quiz zawiera więcej niż jedno zadanie, poniżej wyświetlona jest lista wszystkich zadań, po której możemy przechodzić, wpływając na zawartość paneli z prawej strony.</p><p>Prawy-górny panel Zawiera numer zadania, uzyskane za nie punkty oraz przycisk „Komentarz”, jeżeli został on dodany przez sprawdzającego. Klikając w ten przycisk możemy go wyświetlić.</p><p>W prawym-dolnym panelu widoczne jest polecenie wybranego zadania (o ile zostało dodane przez twórcę) oraz przyciski do dźwiękowego odtwarzania twojego rozwiązania. Poniżej umiejscowiona jest pięciolinia z twoim rozwiązaniem. Jeżeli sprawdzający udostępnił nam wgląd w opinię algorytmu, pod pięciolinią widoczny jest również przełącznik pozwalający nam wyświetlić rozwiązanie proponowane przez algorytm. Pod nim widoczna jest pełna opinia algorytmu, dotycząca twojego rozwiązania.</p>">            
            <i class="far fa-circle-question"></i>
            Pomoc
        </a>
        <hr class="m-0 my-3" />
        <a asp-page="Assigned" class="btn btn-danger btn-std-width mx-auto">Wyjdź</a>
    </div>

    <div class="flex-grow-1 w-100 d-flex flex-column overflow-auto">
        <div class="w-100 bg-white rounded shadow d-flex flex-row align-items-center mb-3 p-3">
            <div class="fs-4 fw-bold me-1">Zadanie</div>
            <div id="exercise-number" class="fs-4 fw-bold me-auto">

            </div>

            <span class="fw-bold me-2 ms-3">Punkty</span>
            <div id="points-text"
                class="border py-1 px-2 border-secondary rounded fw-bold h-100 d-flex align-items-center">
                5 / 15
            </div>

            <a href="#" id="commentButton" class="ms-2 btn btn-secondary" data-bs-toggle="modal"
                data-bs-target="#commentPopup">
                Komentarz
            </a>
            <div href="#" id="noCommentElement" class="ms-2 btn btn-outline-secondary non-interactive">
                Brak komentarza
            </div>
        </div>

        <div class="bg-white rounded shadow flex-grow-1 p-3 d-flex flex-column overflow-auto" id="staff-section-div">
            <div class="flex-grow-1 d-flex flex-row justify-content-between align-items-start">
                <p class="m-0 me-3 fw-semibold" id="exercise-question">
                    @* FILLED VIA JS *@
                </p>

                <div id="playback-area" class="d-flex">
                    <span class="ms-auto fw-semibold">Odtwórz</span>
                    <button id="play-file" type="button" class="btn-icon">
                        <i class="fas fa-play icon-sm"></i>
                    </button>
                    <button id="stop-file" type="button" class="btn-icon">
                        <i class="fas fa-stop icon-sm"></i>
                    </button>
                </div>
            </div>

            <div id="excersise-tonation">
                @*SET VIA JS*@
            </div>

            <div id="music-staff-div" class="flex-grow-1 d-flex flex-row bg-white rounded mt-3">
                <div id="p5_loading">Ładowanie rozwiązania</div>
                @*SET VIA JS*@
            </div>

            @if (Model.Quiz.ShowAlgorithmOpinion)
            {
                <div class="form-check form-switch mb-2">
                    <input class="form-check-input" type="checkbox" role="switch" id="showAlgorithmSolutionSwitch" onchange="switchBetweenSolutions(this)">
                    <label class="form-check-label" for="showAlgorithmSolutionSwitch">Pokaż rozwiązanie algorytmu</label>
                </div>

                <div id="opinion">
                    @*SET VIA JS*@
                </div>
            }
        </div>
    </div>
</div>

<div class="modal fade" id="commentPopup" tabindex="-1" role="dialog" aria-labelledby="deletePopupCenterTitle"
    aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title fw-bold fs-4" id="deletePopupLongTitle">Komentarz</h5>
                <button type="button" class="ms-auto btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body overflow-auto" style="max-height: 250px; min-height: 150px;">
                <div id="comment-text">

                </div>
            </div>
            <div class="modal-footer justify-content-center align-items-center">
                <button type="button" class="btn btn-secondary btn-sm-width focus-ring"
                    data-bs-dismiss="modal">Zamknij</button>
            </div>
        </div>
    </div>
</div>

<partial name="~/Pages/Shared/HelpPopup.cshtml" />

<script>
    const fontUrl = '@Url.Content("~/fonts/Inconsolata.otf")'
    const staffSectionDiv = document.getElementById("staff-section-div");
    const staffSectionWidth = staffSectionDiv.offsetWidth - 60;
    let canvasWidth = staffSectionWidth;
    let canvasHeight = 800;

    const symbolPaths = {
        curlyBrace: '@Url.Content("~/images/staff-symbols/curly-brace.png")',
        bassKey: '@Url.Content("~/images/staff-symbols/bass-key.png")',
        violinKey: '@Url.Content("~/images/staff-symbols/violin-key.png")',
        bemol: '@Url.Content("~/images/staff-symbols/bemol.png")',
        doubleBemol: '@Url.Content("~/images/staff-symbols/double-bemol.png")',
        sharp: '@Url.Content("~/images/staff-symbols/sharp.png")',
        doubleSharp: '@Url.Content("~/images/staff-symbols/double-sharp.png")',
        natural: '@Url.Content("~/images/staff-symbols/natural.png")',
        fullNote: '@Url.Content("~/images/staff-symbols/full-note.png")',
        noteHeadClosed: '@Url.Content("~/images/staff-symbols/note-head-closed.png")',
        noteHeadOpened: '@Url.Content("~/images/staff-symbols/note-head-opened.png")',
        noteFlag: '@Url.Content("~/images/staff-symbols/note-flag.png")',
        mouse: '@Url.Content("~/images/staff-symbols/mouse.png")',
        noteReverse: '@Url.Content("~/images/staff-symbols/note-reverse.png")',
        thrashCan: '@Url.Content("~/images/staff-symbols/thrash-can.png")',
        thrashCanCrossed: '@Url.Content("~/images/staff-symbols/thrash-can-crossed.png")',
    };

    const questionsRaw = @Html.Raw(JsonConvert.SerializeObject(Model.Questions));
    const questions = questionsRaw.map(q => JSON.parse(q));

    const answers = @Html.Raw(JsonConvert.SerializeObject(Model.Answers));

    let currentIndex = 0;
    function getCurrentSolution() {
        return answers[currentIndex];
    }

</script>

<script src="~/lib/p5/p5.min.js"></script>
<script src="~/js/staff-scripts/constants.js"></script>
<script src="~/js/staff-scripts/symbols.js"></script>
<script src="~/js/staff-scripts/bar.js"></script>
<script src="~/js/staff-scripts/vertical.js"></script>
<script src="~/js/staff-scripts/twoNotes.js"></script>
<script src="~/js/staff-scripts/functionSymbol.js"></script>
<script src="~/js/staff-scripts/note.js"></script>
<script src="~/js/staff-scripts/keySignature.js"></script>
<script src="~/js/staff-scripts/metre.js"></script>
<script src="~/js/staff-scripts/accidental.js"></script>
<script src="~/js/staff-scripts/staff.js"></script>
<script src="~/js/staff-scripts/sketchGrading.js"></script>

<script type='text/javascript' src='https://www.midijs.net/lib/midi.js'></script>

<script type="module" defer>
    import { playTask } from "../js/midi-player-scripts/midiPlayer.js";
    import { parseAccidentalsCountToTonationInfo } from "./js/utils.js";

    const results = @Json.Serialize(Model.ExerciseResults);
    const algorithmSolutions = @Html.Raw(JsonConvert.SerializeObject(Model.AlgorithmSolutions.Select(x => x.Item1)));

    let midiPlay = document.getElementById('play-file');
    let midiStop = document.getElementById('stop-file');
    let playUser = true;

    function playAlgorithmSolution(index) {
        return () => playTask(algorithmSolutions[index]);
    }

    function playAnswer(index) {
        return () => playTask(answers[index]);
    }

    function stopMidi() {
        MIDIjs.stop();
    }

    function updateListeners(index) {
        midiPlay.replaceWith(midiPlay.cloneNode(true));
        midiStop.replaceWith(midiStop.cloneNode(true));

        midiPlay = document.getElementById('play-file');
        midiStop = document.getElementById('stop-file');

        if (playUser) {
            midiPlay.addEventListener('click', playAnswer(index));
            midiStop.addEventListener('click', stopMidi);
        } else {
            midiPlay.addEventListener('click', playAlgorithmSolution(index));
            midiStop.addEventListener('click', stopMidi);
        }
    }

    window.switchBetweenSolutions = function (checkbox) {
        if (checkbox.checked) {
            grandStaff.loadFromJson(questions[currentIndex], algorithmSolutions[currentIndex]);
            playUser = false;
        } else {
            grandStaff.loadFromJson(questions[currentIndex], answers[currentIndex]);
            playUser = true;
        }

        updateListeners(currentIndex);
    }

    window.loadQuestion = function (index, loadToGrandStaff = true) {
        const result = results[index];

        if (index >= 0 && index < questions.length) {
            midiPlay.removeEventListener('click', () => playTask(algorithmSolutions[index]));
            midiStop.removeEventListener('click', () => MIDIjs.stop());

            document.getElementById("exercise-number").innerText = index + 1;
            document.getElementById("exercise-question").innerText = questions[index].question;

            if (questions[index].question == '')
                document.getElementById("exercise-question").innerText = 'Brak polecenia dla tego zadania';
            else
                document.getElementById("exercise-question").innerText = questions[index].question;
            
            const excersiseTonation = document.getElementById("excersise-tonation");
            const question = questions[index];
            const sharpsCount = question.sharpsCount;
            const flatsCount = question.flatsCount;
            const minor = question.minor;

            const obj = [sharpsCount, flatsCount, minor];

            const tonationInfo = parseAccidentalsCountToTonationInfo(obj);
            const tonation = `${tonationInfo[0]}-${tonationInfo[1]}`;

            excersiseTonation.innerHTML = `
                <p><span class="fw-semibold">Tonacja: </span> ${tonation}</p>
            `;
            
            if (loadToGrandStaff)
                grandStaff.loadFromJson(questions[index], answers[index]);

            const toggle = document.getElementById("showAlgorithmSolutionSwitch");
            if (toggle) {
                toggle.checked = false;
            }

            document.getElementById("points-text").innerText = result.points + " / " + result.maxPoints;

            const isComment = result.comment != '';
            document.getElementById("commentButton").style.display = isComment ? 
                "inline-block" : 
                "none";

            document.getElementById("noCommentElement").style.display = isComment ? 
                "none" :
                "flex";

            document.getElementById("comment-text").innerText = result.comment;

            const opinionDiv = document.getElementById("opinion");
            const algorithmDiv = document.getElementById("algorithm-solution");
            
            if (opinionDiv) {
                const opinion = result.opinion;

                if (opinion !== "") {
                    opinionDiv.innerHTML = `
                        <details>
                            <summary>Opinia algorytmu</summary>
                            ${opinion}
                        </details>`;
                }
                else {
                    opinionDiv.innerHTML = `
                        <details>
                            <summary>Opinia algorytmu</summary>
                        </details>`;
                }
            }

            generateButtons(index);

            playUser = true;
            updateListeners(index);
        }
    }    

    function generateButtons(index) {
        var questionButtonsContainer = document.getElementById("exercises-buttons");
        questionButtonsContainer.innerHTML = '';

        if (questions.length == 1)
            return;

        for (var i = 0; i < questions.length; i++) {
            var button = document.createElement("button");
            button.className = "btn " + (i === index ? "btn-secondary btn-current" : "btn-outline-secondary btn-hidable") + " btn-tiny-width p-1";
            button.innerText = i + 1;

            button.onclick = (function (i) {
                return function () {
                    currentIndex = i;
                    loadQuestion(currentIndex);
                };
            })(i);

            questionButtonsContainer.appendChild(button);
        }
    }

    loadQuestion(currentIndex, false);
</script>