@page
@model Main.Pages.BrowseModel
@using Main.Enumerations;
@using JsonConvert = Newtonsoft.Json.JsonConvert;
@{
    var totalPoints = Model.QuizResult.ExcersiseResults.Sum(er => er.Points);
    var totalMax = Model.QuizResult.ExcersiseResults.Sum(er => er.MaxPoints);
    var percent = Math.Round((totalPoints / (float)totalMax) * 100);
}

<head>
    <link rel="stylesheet" href="~/css/browse-style.css" />
</head>

<div class="h-100 w-100 d-flex flex-row pb-3">
    <div class="bg-white rounded d-flex flex-column shadow p-3 me-3" style="width: 250px; min-width: 250px;">
        <div class="fw-bold fs-4 overflow-hidden" style="text-overflow: ellipsis;">
            @*todo @Model.QuizResult.Quiz.Name *@
            Kartkówka 2A
        </div>

        <div class="d-flex flex-row mt-3">
            <div class="d-flex flex-column me-4">
                <span class="fw-semibold">Ocena</span>
                <div class="d-flex flex-row align-items-center mt-1">
                    <div class="border border-secondary rounded text-secondary fw-bold px-2 py-1">
                        @(((Grade)(Model.QuizResult.Grade!)).AsString())
                    </div>
                </div>
            </div>

            <div class="d-flex flex-column">
                <span class="fw-semibold">Wynik</span>
                <div class="d-flex flex-row align-items-center mt-1">
                    <div class="border border-secondary text-secondary fw-bold rounded px-2 py-1 me-2">
                        @totalPoints / @totalMax
                    </div>
                    <div class="border border-secondary text-secondary fw-bold rounded px-2 py-1">
                        @(percent)%
                    </div>
                </div>
            </div>
        </div>

        <div class="fw-semibold mt-4">Zadania</div>
        <div id="excersises-buttons" class="w-100 mt-1 mb-auto" style="display: grid; grid-template-columns: repeat(auto-fill, minmax(30px, 1fr)); gap: 5px;">
            @* FILLED VIA JS *@
        </div>

        <button id="btn-next" type="button" onclick="nextQuestion()" class="btn btn-secondary btn-std-width mx-auto">Następne</button>
        <a asp-page="Assigned" class="btn btn-danger btn-std-width mt-2 mx-auto">Wyjdź</a>
    </div>

    <div class="flex-grow-1 w-100 d-flex flex-column overflow-auto">
        <div class="w-100 bg-white rounded shadow d-flex flex-row align-items-center mb-3 p-3">
            <div id="excersise-number" class="fs-4 fw-bold me-auto">
                
            </div>

            <span class="fw-bold me-2 ms-3">Punkty</span>
            <div id="points-text" class="border px-2 py-1 border-secondary rounded fw-bold">
                5 / 15
            </div>

            <button id="commentButton" class="btn btn-secondary ms-2">Zobacz komentarz</button>
        </div>

        <div class="bg-white rounded shadow p-3 d-flex flex-column overflow-auto">
            <div id="excersise-question-area">
                <p id="excersise-question" class="m-0 fw-semibold">
                    @*SET VIA JS*@
                </p>
            </div>

            <div class="mt-3 music-staff flex-grow-1 w-100 d-flex flex-row justify-content-center align-items-center">
                <div id="music-staff-div" class="flex-grow-1 bg-white shadow rounded h-100 d-flex">
                    @* MUSIC STAFF DIV SET VIA JS *@
                </div>
            </div>
        </div>
    </div>
</div>

 @* <div class="d-flex flex-row align-items-start question-area">   
            <div class="border border-secondary flex-grow-1 h-100 rounded me-2 px-2 py-1 overflow-auto">
                <div id="comment-div">
                    <div class="fw-bold">Komentarz oceniającego</div>
                    <div id="comment-text"></div>
                </div>
                <div id="no-comment-div" class="fw-bold h-100 d-flex flex-column justify-content-center">Oceniający nie zamieścił komentarza</div>
            </div>

        </div> *@



<script>
    const fontUrl = '@Url.Content("~/fonts/Inconsolata.otf")'

    const symbolPaths = {
        curlyBrace: '@Url.Content("~/images/staff-symbols/curly-brace.png")',
        bassKey: '@Url.Content("~/images/staff-symbols/bass-key.png")',
        violinKey: '@Url.Content("~/images/staff-symbols/violin-key.png")',
        bemol: '@Url.Content("~/images/staff-symbols/bemol.png")',
        doubleBemol: '@Url.Content("~/images/staff-symbols/double-bemol.png")',
        sharp: '@Url.Content("~/images/staff-symbols/sharp.png")',
        doubleSharp: '@Url.Content("~/images/staff-symbols/double-sharp.png")',
        natural: '@Url.Content("~/images/staff-symbols/natural.png")',
        fullNote: '@Url.Content("~/images/staff-symbols/full-note.png")',
        noteHeadClosed: '@Url.Content("~/images/staff-symbols/note-head-closed.png")',
        noteHeadOpened: '@Url.Content("~/images/staff-symbols/note-head-opened.png")',
        noteFlag: '@Url.Content("~/images/staff-symbols/note-flag.png")',
        mouse: '@Url.Content("~/images/staff-symbols/mouse.png")',
        noteReverse: '@Url.Content("~/images/staff-symbols/note-reverse.png")',
        thrashCan: '@Url.Content("~/images/staff-symbols/thrash-can.png")',
        thrashCanCrossed: '@Url.Content("~/images/staff-symbols/thrash-can-crossed.png")',
    };

    let canvasWidth = 1264;
    let canvasHeight = 800;

    const questionsRaw = @Html.Raw(JsonConvert.SerializeObject(Model.QuizResult.Quiz.Excersises.Select(e => e.Question)));
    const questions = questionsRaw.map(q => JSON.parse(q));
    const answers = @Html.Raw(JsonConvert.SerializeObject(Model.QuizResult.ExcersiseResults.Select(r => r.ExcersiseSolution.Answer)));

    let currentIndex = 0;

    function getCurrentSolution() {
        return answers[currentIndex];
    }

</script>

<script src="~/lib/p5/p5.min.js"></script>
<script src="~/js/staff-scripts/constants.js"></script>
<script src="~/js/staff-scripts/symbols.js"></script>
<script src="~/js/staff-scripts/bar.js"></script>
<script src="~/js/staff-scripts/vertical.js"></script>
<script src="~/js/staff-scripts/twoNotes.js"></script>
<script src="~/js/staff-scripts/functionSymbol.js"></script>
<script src="~/js/staff-scripts/note.js"></script>
<script src="~/js/staff-scripts/keySignature.js"></script>
<script src="~/js/staff-scripts/metre.js"></script>
<script src="~/js/staff-scripts/accidental.js"></script>
<script src="~/js/staff-scripts/staff.js"></script>
<script src="~/js/staff-scripts/sketchGrading.js"></script>

<script>
    const results = @Json.Serialize(Model.QuizResult.ExcersiseResults);

    function loadQuestion(index, loadToGrandStaff = true) {
        if (index >= 0 && index < questions.length) {
            document.getElementById("excersise-number").innerText = "" + (index + 1) + "/" + (questions.length);
            document.getElementById("excersise-question").innerText = questions[index].question;

            if (questions[index].question == '')
                document.getElementById('excersise-question-area').classList.add('d-none');
            else 
                document.getElementById('excersise-question-area').classList.remove('d-none');

            if (loadToGrandStaff) {
                grandStaff.loadFromJson(questions[index], answers[index]);
            }
            document.getElementById("points-text").innerText = results[index].points + " / " + results[index].maxPoints;

            var isComment = results[index].comment != '';
            document.getElementById("commentButton").style.display = isComment ? "inline-block" : "none";
            @* document.getElementById("comment-div").style.display = isComment ? "inline-block" : "none";
            document.getElementById("no-comment-div").style.display = isComment ? "none" : "inline-block";
            document.getElementById("comment-text").innerText = results[index].comment; *@

            generateButtons(index);
        }
    }

    const maxVisibleButtons = 9;
    const targetVisibleOneSide = Math.floor(maxVisibleButtons / 2)
    function generateButtons(index) {
        var questionButtonsContainer = document.getElementById("excersises-buttons");
        questionButtonsContainer.innerHTML = '';

        for (var i = 0; i < questions.length; i++) {
            var button = document.createElement("button");
            button.className = "btn " + (i === index ? "btn-secondary btn-current" : "btn-outline-secondary btn-hidable") + " btn-tiny-width p-1";
            button.innerText = i + 1;

            button.onclick = (function (i) {
                return function () {
                    currentIndex = i;
                    loadQuestion(currentIndex);
                };
            })(i);

            questionButtonsContainer.appendChild(button);
        }
    }

    function prevQuestion() {
        if (currentIndex > 0) {
            currentIndex--;
            loadQuestion(currentIndex);
        }
    }

    function nextQuestion() {
        if (currentIndex < questions.length - 1) {
            currentIndex++;
            loadQuestion(currentIndex);
        }
    }

    function lastQuestion() {
        if (currentIndex < questions.length - 1) {
            currentIndex = questions.length - 1;
            loadQuestion(currentIndex);
        }
    }

    loadQuestion(currentIndex, false);

</script>