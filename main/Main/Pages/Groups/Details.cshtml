@page
@model Main.Pages.GroupDetailsModel
@{
    var teacherRequests = Model.Group.Requests.Where(q => q.ForTeacher).Select(q => q.User);

    var studentRequests = Model.Group.Requests.Where(q => !q.ForTeacher).Select(q => q.User);

    var teachers = Model.Group.Teachers;

    var students = Model.Group.Students;
}

<div class="h-100 w-100 d-flex flex-row pb-3">
    <form method="post" asp-page-handler="DeleteUser" id="formForDeleteUser">
        <input type="hidden" asp-for="GroupId" value="@Model.Group.Id"/>
        <input type="hidden" asp-for="UserId" value="" id="userToRemoveId"/>
    </form>
    <form method="post" asp-page-handler="AddUsers" id="formForAddUsers">
        <input type="hidden" asp-for="GroupId" value="@Model.Group.Id"/>
        <input type="hidden" asp-for="AsAdmins" value="" id="addUserAsAdmins"/>
        <input type="hidden" asp-for="EmailsAsString" value="" id="addUsersEmails"/>
    </form>
    <div class="h-100 bg-white shadow rounded d-flex flex-column p-3 me-3" style="width: 250px; min-width: 250px;">
        <form method="post" asp-page-handler="RedirectToIndexOwned" class="mb-2">
            <button type="submit" class="w-100 btn d-flex align-items-center justify-content-start p-3 @(Model.IsAdmin ? "btn-primary" : "btn-outline-dark hover-primary")">
                <i class="fas fa-user icon-sm me-2"></i>
                <span>Posiadane grupy</span>
            </button>
        </form>
        <form method="post" asp-page-handler="RedirectToIndexJoined">
            <button type="submit" class="w-100 btn d-flex align-items-center justify-content-start p-3 @(!Model.IsAdmin ? "btn-primary" : "btn-outline-dark hover-primary")">
                <i class="fas fa-user-group icon-sm me-2"></i>
                <span>Dołączone grupy</span>
            </button>
        </form>
    </div>

    <div class="h-100 w-100 flex-group-1 d-flex flex-column p-3 bg-white rounded shadow">
        <div class="d-flex flex-column mb-3">
            <span class="fs-3 fw-bold mb-2">@(Model.Group.Name)</span>
            <div class="d-flex flex-row">
                <button id="usersButton" onclick="switchTab(this)"
                        class="btn btn-primary d-flex align-items-center p-3 me-3">
                    <i class="fas fa-user-group icon-sm me-2"></i>
                    <span>Uczestnicy</span>
                </button>
                <button id="quizesButton" onclick="switchTab(this)"
                        class="btn btn-outline-dark hover-primary d-flex align-items-center p-3">
                    <i class="fas fa-music icon-sm me-2"></i>
                    <span>Quizy</span>
                </button>
            </div>
        </div>

        <div id="usersSection" class="h-100 d-flex flex-row overflow-auto" style="margin: -20px; padding: 20px;">
            <div class="w-50 h-100 rounded bg-white shadow border border-1 d-flex flex-column me-3">
                <div class="bg-light rounded-top d-flex flex-row fw-bold fs-5 p-2">
                    <span class="mx-auto">Uczestnicy</span>
                </div>

                <hr class="m-0 border border-1" />

                <div class="flex-grow-1 d-flex flex-column p-2 overflow-auto">
                    <div class="d-flex flex-row fw-bold mb-2">
                        <span class="me-1">Aktywni</span>
                        <span class="me-auto">(@(students.Count()))</span>
                    </div>

                    <div class="d-flex flex-column">
                        @foreach (var student in students)
                        {
                            <div class="bg-transparent rounded border d-flex flex-row p-2 mb-2">
                                <span class="text-truncate me-2">@(student.FullName)</span>
                                <button type="button" class="ms-auto btn-close" aria-label="Close"
                                        data-bs-toggle="modal" data-bs-target="#deleteUserPopup"
                                        data-user-mail="@(student.Email)" data-on-delete="deleteUser(@(student.Id))"></button>
                                    </div>
                                }
                    </div>

                    <div class="d-flex flex-row fw-bold mb-2">
                        <span class="me-1">Oczekujący</span>
                        <span class="me-auto">(@(studentRequests.Count()))</span>
                    </div>

                    <div class="d-flex flex-column">
                        @foreach (var studentRequest in studentRequests)
                        {
                            <div class="bg-transparent rounded border d-flex flex-row p-2 mb-2">
                                <span class="text-truncate me-2">@(studentRequest.Email)</span>
                            </div>
                        }
                    </div>

                </div>

                <hr class="m-0 border border-1" />

                <div class="bg-light rounded-bottom d-flex flex-row fw-bold p-2">
                    <button class="btn btn-primary mx-auto"
                            data-bs-toggle="modal" data-bs-target="#addUsersPopup"
                            data-adding-admins="false" data-callback-name="addUsers">
                        Dodaj uczestników
                    </button>
                </div>
            </div>

            <div class="w-50 h-100 rounded bg-white shadow border border-1 d-flex flex-column me-3">
                <div class="bg-light rounded-top d-flex flex-row fw-bold fs-5 p-2">
                    <span class="mx-auto">Administratorzy</span>
                </div>

                <hr class="m-0 border border-1" />

                <div class="flex-grow-1 d-flex flex-column p-2 overflow-auto">
                    <div class="d-flex flex-row fw-bold mb-2">
                        <span class="me-1">Aktywni</span>
                        <span class="me-auto">(@(teachers.Count()+1))</span>
                    </div>

                    <div class="d-flex flex-column">
                        <div class="bg-transparent rounded border d-flex flex-row p-2 mb-2">
                            <i class="fas fa-crown icon-sm me-1"></i>

                            <span class="text-truncate me-2">@(Model.GroupMaster.FullName)</span>
                        </div>
                        @foreach (var teacher in teachers)
                        {
                            <div class="bg-transparent rounded border d-flex flex-row p-2 mb-2">
                                <span class="text-truncate me-2">@(teacher.FullName)</span>

                                <button type="button" class="ms-auto btn-close" aria-label="Close"
                                            data-bs-toggle="modal" data-bs-target="#deleteUserPopup"
                                            data-user-mail="@(teacher.Email)" data-on-delete="deleteUser(@(teacher.Id))"></button>
                            </div>
                        }
                    </div>

                    <div class="d-flex flex-row fw-bold mb-2">
                        <span class="me-1">Oczekujący</span>
                        <span class="me-auto">(@(teacherRequests.Count()))</span>
                    </div>

                    <div class="d-flex flex-column">
                        @foreach (var teacherRequest in teacherRequests)
                        {
                            <div class="bg-transparent rounded-bottom rounded border d-flex flex-row p-2 mb-2">
                                <span class="text-truncate me-2">@(teacherRequest.Email)</span>
                            </div>
                        }
                    </div>
                </div>

                <hr class="m-0 border border-1" />

                <div class="bg-transparent d-flex flex-row fw-bold p-2">
                    <button class="btn btn-primary mx-auto"
                            data-bs-toggle="modal" data-bs-target="#addUsersPopup"
                            data-adding-admins="true" data-callback-name="addUsers">
                        Dodaj administratorów
                    </button>
                </div>
            </div>
        </div>

        <div id="quizesSection" class="h-100 d-flex flex-row overflow-auto d-none" style="margin: -20px; padding: 20px;">
            <div class="w-50 h-100 rounded bg-white shadow border border-1 d-flex flex-column me-3">
                <div class="bg-light rounded-top d-flex flex-row fw-bold fs-5 p-2">
                    <span class="mx-auto">Aktywne</span>
                </div>

                <hr class="m-0 border border-1" />

                <div class="flex-grow-1 d-flex flex-column p-2 overflow-auto">
                    @{var first = true;}
                    @foreach (var quiz in Model.Group.Quizzes)
                    {
                        <div class="border border-1 rounded p-0 flex-shrink-0 d-flex flex-row overflow-hidden p-3 @(first ? "mt-2" : "")">
                            <div class="flex-grow-1 d-flex flex-column">
                                <div class="fw-bold fs-5 mb-3">@(quiz.Name)</div>

                                <div class="d-flex flex-row align-items-center mb-2">
                                    <i class="far fa-clock icon-sm me-2"></i>
                                    <span class="fw-bold me-1">Pozostało:</span>
                                    <span id="to-solve-time-@(quiz.Id)">
                                        @*TODO: WYPEŁNIJ TO ZA POMOCĄ JS, TAK ŻEBY AKTUALIZOWAŁO SIĘ CO SEKUNDĘ. KOD MOŻNA PRZEKOPIOWAĆ Z EKRANU CREATED*@
                                    </span>
                                </div>
                                <div class="d-flex flex-row align-items-center mb-2">
                                    <i class="fas fa-music icon-sm me-2"></i>
                                    <span class="fw-bold me-1">Zadania:</span>
                                    <span>@(quiz.Excersises.Count())</span>
                                </div>
                                <div class="d-flex flex-row align-items-center">
                                    <i class="fas fa-user icon-sm me-2"></i>
                                    <span class="fw-bold me-1">Twórca:</span>
                                    <span>@(quiz.Creator.FullName)</span>
                                </div>
                            </div>

                            @if (!Model.IsAdmin)
                            {
                                <div class="d-flex flex-column h-100">
                                    <a asp-page="/Solve" asp-route-code="@(quiz.Code)" class="btn btn-primary ms-auto mt-auto">Rozwiąż</a>
                                </div>
                            }
                        </div>
                        first = false;
                    }
                </div>
            </div>

            <div class="w-50 h-100 rounded bg-white shadow border border-1 d-flex flex-column me-3">
                <div class="bg-light rounded-top d-flex flex-row fw-bold fs-5 p-2">
                    <span class="mx-auto">Zaplanowane</span>
                </div>

                <hr class="m-0 border border-1" />

                <div class="flex-grow-1 d-flex flex-column p-2 overflow-auto">
                    @{first = true;}
                    @foreach(var quiz in Model.Group.Quizzes)
                    {
                        <div class="border border-1 rounded p-0 flex-shrink-0 d-flex flex-row overflow-hidden p-3 @(first? "mt-2" : "")">
                            <div class="flex-grow-1 d-flex flex-column">
                                <div class="fw-bold fs-5 mb-3">@(quiz.Name)</div>

                                <div class="d-flex flex-row align-items-center mb-2">
                                    <i class="far fa-clock icon-sm me-2"></i>
                                    <span class="fw-bold me-1">Dostępne za:</span>
                                    <span id="future-quiz-time-@(quiz.Id)">
                                        @*TODO: WYPEŁNIJ TO ZA POMOCĄ JS, TAK ŻEBY AKTUALIZOWAŁO SIĘ CO SEKUNDĘ. KOD MOŻNA PRZEKOPIOWAĆ Z EKRANU CREATED*@
                                    </span>
                                </div>
                                <div class="d-flex flex-row align-items-center mb-2">
                                    <i class="fas fa-music icon-sm me-2"></i>
                                    <span class="fw-bold me-1">Zadania:</span>
                                    <span>@(quiz.Excersises.Count())</span>
                                </div>
                                <div class="d-flex flex-row align-items-center">
                                    <i class="fas fa-user icon-sm me-2"></i>
                                    <span class="fw-bold me-1">Twórca:</span>
                                    <span>@(quiz.Creator.FullName)</span>
                                </div>
                            </div>

                            @* Chyba usunąć - nie można edytować quizu po publikacji *@
                            @if (Model.IsAdmin)
                            {
                                <div class="d-flex flex-column h-100">
                                    <a asp-page="/Creator" asp-route-id="@(quiz.Id)" class="btn btn-primary ms-auto mt-auto">Edytuj</a>
                                </div>
                            }
                        </div>
                        first = false;
                    }
                </div>
            </div>
        </div>

    </div>
</div>

<partial name="~/Pages/Shared/DeleteUserPopup.cshtml" />
<partial name="~/Pages/Shared/AddUsersPopup.cshtml" />

<script>

    const usersButton = document.getElementById("usersButton");
    const quizesButton = document.getElementById("quizesButton");
    const usersSection = document.getElementById("usersSection");
    const quizesSection = document.getElementById("quizesSection");

    function switchTab(selectedButton) {
        if (selectedButton == usersButton) {
            usersButton.classList.add("btn-primary");
            usersButton.classList.remove("btn-outline-dark", "hover-primary");
            quizesButton.classList.add("btn-outline-dark", "hover-primary");
            quizesButton.classList.remove("btn-primary");

            quizesSection.classList.add("d-none")
            usersSection.classList.remove("d-none");
        } else {
            quizesButton.classList.add("btn-primary");
            quizesButton.classList.remove("btn-outline-dark", "hover-primary");
            usersButton.classList.add("btn-outline-dark", "hover-primary");
            usersButton.classList.remove("btn-primary");

            usersSection.classList.add("d-none")
            quizesSection.classList.remove("d-none");
        }
    }

    function deleteUser(userId) {
        //TODO: DELETE USER WITH ID, REFRESH PAGE

        document.getElementById("userToRemoveId").value = userId;
        document.getElementById("formForDeleteUser").submit();

        console.log("deleting user " + userId);
    }

    async function addUsers(userEmails, areAdmins) {

        document.getElementById("addUserAsAdmins").value = areAdmins;
        document.getElementById("addUsersEmails").value = userEmails;
        form = document.getElementById("formForAddUsers");

        const formData = new FormData(form);

        console.log("admins " + areAdmins)
        console.log("users " + userEmails);

        try {
            
            const response = await fetch(form.action, {
                method: form.method,
                body: formData,
                redirect: 'manual'
            });

            if (response.status >= 300 && response.status < 400) {
                const redirectUrl = response.headers.get('Location');
                if (redirectUrl) {
                    console.log('Redirect to:', redirectUrl);
                    // Optionally navigate to the new page
                    window.location.href = redirectUrl;
                }
                else {
                    console.log('Redirect detected, but no Location header found');
                }
            }
            else {
                // Handle non-redirect response as usual
                const result = await response.json();
                console.log(result);
                return result;
            }

        }
        catch (error) {
            console.error('An error occurred:', error);
        }

        return null;
    }

</script>