@page
@model Main.Pages.GroupDetailsModel
@using Enumerations
@{
    var teacherRequests = Model.Group.Requests.Where(q => q.ForTeacher).Select(q => q.User);
    var studentRequests = Model.Group.Requests.Where(q => !q.ForTeacher).Select(q => q.User);
}

<div class="h-100 w-100 d-flex flex-row pb-3">
    <form method="post" asp-page-handler="DeleteUser" id="formForDeleteUser">
        <input type="hidden" asp-for="GroupId" value="@Model.Group.Id" />
        <input type="hidden" asp-for="RemoveFromStudents" value="" id="deleteUserFromStudents" />
        <input type="hidden" asp-for="UserId" value="" id="deleteUserId" />
    </form>
    <form method="post" asp-page-handler="AddUsers" id="formForAddUsers">
        <input type="hidden" asp-for="GroupId" value="@Model.Group.Id" />
        <input type="hidden" asp-for="AsAdmins" value="" id="addUserAsAdmins" />
        <input type="hidden" asp-for="EmailsAsString" value="" id="addUsersEmails" />
    </form>
    <div class="d-none d-lg-inline h-100 bg-white shadow rounded d-flex flex-column p-3 me-3"
        style="width: 250px; min-width: 250px;">
        <form method="post" asp-page-handler="RedirectToIndexOwned" class="mb-2">
            <button type="submit"
                class="w-100 btn d-flex align-items-center justify-content-start p-3 @(Model.IsAdmin ? "btn-primary" : "btn-outline-secondary hover-primary")">
                <i class="fas fa-user icon-sm me-2"></i>
                <span>Posiadane grupy</span>
            </button>
        </form>
        <form method="post" asp-page-handler="RedirectToIndexJoined">
            <button type="submit"
                class="w-100 btn d-flex align-items-center justify-content-start p-3 @(!Model.IsAdmin ? "btn-primary" : "btn-outline-secondary hover-primary")">
                <i class="fas fa-user-group icon-sm me-2"></i>
                <span>Dołączone grupy</span>
            </button>
        </form>
    </div>

    <div class="h-100 w-100 flex-group-1 d-flex flex-column py-3 bg-white rounded shadow border">
        <div class="d-flex flex-column px-3 mb-3">
            <span class="fs-3 fw-bold mb-2">@(Model.Group.Name)</span>

            <div class="d-none d-md-flex flex-row">
                <button id="usersButton" onclick="switchTab(0)"
                    class="btn btn-primary d-flex align-items-center p-3 me-3">
                    <i class="fas fa-user-group icon-sm me-2"></i>
                    <span>Uczestnicy</span>
                </button>
                <button id="groupQuizesButton" onclick="switchTab(1)"
                    class="btn btn-outline-secondary hover-primary d-flex align-items-center p-3 me-3">
                    <i class="fas fa-music icon-sm me-2"></i>
                    <span>Quizy grupy</span>
                </button>
                <button id="gradeQuizesButton" onclick="switchTab(2)"
                    class="btn btn-outline-secondary hover-primary d-flex align-items-center p-3">
                    <i class="fas fa-music icon-sm me-2"></i>
                    <span>@(Model.IsAdmin ? "Quizy do oceny" : "Quizy ocenione")</span>
                </button>
            </div>

            <div class="d-md-none w-100">
                <select class="form-select" id="sm-tab-select" onchange="switchTab(parseInt(this.value))">
                    <option value="0" selected>Uczestnicy</option>
                    <option value="1">Quizy grupy</option>
                    <option value="2">@(Model.IsAdmin ? "Quizy do oceny" : "Quizy ocenione")</option>
                </select>
            </div>
        </div>

        <div id="usersSection" class="h-100 d-flex flex-row overflow-auto px-3">
            <div class="w-50 h-100 rounded bg-white shadow-sm border border-1 d-flex flex-column me-3"
                style="min-width: 200px">
                <div class="bg-light rounded-top d-flex flex-row fw-bold fs-5 p-2">
                    <span class="mx-auto">Uczestnicy</span>
                </div>

                <hr class="m-0 border border-1" />

                <div class="flex-grow-1 d-flex flex-column p-2 overflow-auto">
                    <div class="d-flex flex-row fw-bold mb-2">
                        <span class="me-1">Aktywni</span>
                        <span class="me-auto" id="student-list-count">(@(Model.Group.Students.Count))</span>
                    </div>

                    <div class="d-flex flex-column">
                        @{
                            int studentIndex = 0;
                        }
                        @foreach (var student in Model.Group.Students)
                        {
                            <div class="bg-transparent rounded border d-flex flex-row p-2 mb-2"
                                id="students-list-element-@(studentIndex)">
                                <span class="text-truncate me-2">@(student.FullName)</span>
                                @if (Model.IsAdmin)
                                {
                                    <button type="button" class="ms-auto btn-close" aria-label="Close" data-bs-toggle="modal"
                                        data-bs-target="#deleteUserPopup" data-user-mail="@(student.Email)"
                                        data-on-delete="deleteUser(`@(student.Id)`, true, @(studentIndex))"></button>
                                }
                            </div>
                            studentIndex++;
                        }
                    </div>


                    @if (Model.IsAdmin)
                    {
                        <div class="d-flex flex-row fw-bold mb-2">
                            <span class="me-1">Oczekujący</span>
                            <span class="me-auto" id="student-requests-count">(@(studentRequests.Count()))</span>
                        </div>

                        <div class="d-flex flex-column" id="student-requests-list">
                            @foreach (var studentRequest in studentRequests)
                            {
                                <div class="bg-transparent rounded border d-flex flex-row p-2 mb-2">
                                    <span class="text-truncate me-2">@(studentRequest.FullName)</span>
                                </div>
                            }
                        </div>

                    }

                </div>

                @if (Model.IsAdmin)
                {
                    <hr class="m-0 border border-1" />
                    <div class="rounded-bottom d-flex flex-row fw-bold p-2">
                        <button class="btn btn-primary mx-auto" data-bs-toggle="modal" data-bs-target="#addUsersPopup"
                            data-adding-admins="false" data-callback-name="addUsers">
                            Dodaj uczestników
                        </button>
                    </div>
                }
            </div>

            <div class="w-50 h-100 rounded bg-white shadow-sm border border-1 d-flex flex-column"
                style="min-width: 200px">
                <div class="bg-light rounded-top d-flex flex-row fw-bold fs-5 p-2">
                    <span class="mx-auto">Administratorzy</span>
                </div>

                <hr class="m-0 border border-1" />

                <div class="flex-grow-1 d-flex flex-column p-2 overflow-auto">
                    <div class="d-flex flex-row fw-bold mb-2">
                        <span class="me-1">Aktywni</span>
                        <span class="me-auto" id="teacher-list-count">(@(Model.Group.Teachers.Count + 1))</span>
                    </div>

                    <div class="d-flex flex-column">
                        <div class="bg-transparent rounded border d-flex flex-row p-2 mb-2">
                            <i class="fas fa-crown icon-sm me-1"></i>

                            <span class="text-truncate me-2">@(Model.Group.MasterUser.FullName)</span>
                        </div>
                        @{
                            int teacherIndex = 0;
                        }
                        @foreach (var teacher in Model.Group.Teachers)
                        {
                            <div class="bg-transparent rounded border d-flex flex-row p-2 mb-2"
                                id="teachers-list-element-@(teacherIndex)">
                                <span class="text-truncate me-2">@(teacher.FullName)</span>

                                @if (Model.IsMaster)
                                {
                                    <button type="button" class="ms-auto btn-close" aria-label="Close" data-bs-toggle="modal"
                                        data-bs-target="#deleteUserPopup" data-user-mail="@(teacher.Email)"
                                        data-on-delete="deleteUser(`@(teacher.Id)`, false, @(teacherIndex))"></button>
                                }
                            </div>
                            teacherIndex++;
                        }
                    </div>

                    @if (Model.IsMaster)
                    {
                        <div class="d-flex flex-row fw-bold mb-2">
                            <span class="me-1">Oczekujący</span>
                            <span class="me-auto" id="teacher-requests-count">(@(teacherRequests.Count()))</span>
                        </div>

                        <div class="d-flex flex-column" id="teacher-requests-list">
                            @foreach (var teacherRequest in teacherRequests)
                            {
                                <div class="bg-transparent rounded-bottom rounded border d-flex flex-row p-2 mb-2">
                                    <span class="text-truncate me-2">@(teacherRequest.FullName)</span>
                                </div>
                            }
                        </div>
                    }
                </div>

                @if (Model.IsMaster)
                {
                    <hr class="m-0 border border-1" />

                    <div class="bg-transparent d-flex flex-row fw-bold p-2">
                        <button class="btn btn-primary mx-auto" data-bs-toggle="modal" data-bs-target="#addUsersPopup"
                            data-adding-admins="true" data-callback-name="addUsers">
                            Dodaj administratorów
                        </button>
                    </div>
                }
            </div>
        </div>

        <div id="groupQuizesSection" class="h-100 d-flex flex-row overflow-auto px-3 d-none">
            <div class="w-50 h-100 rounded bg-white shadow-sm border border-1 d-flex flex-column me-3"
                style="min-width: 200px">
                <div class="bg-light rounded-top d-flex flex-row fw-bold fs-5 p-2">
                    <span class="mx-auto">Aktywne</span>
                </div>

                <hr class="m-0 border border-1" />

                <div class="flex-grow-1 d-flex flex-column p-2 overflow-auto">
                    @{
                        var first = true;
                    }
                    @foreach (var quiz in Model.ActiveQuizzes)
                    {
                        <div
                            class="border border-1 rounded p-0 flex-shrink-0 d-flex flex-row overflow-hidden p-3 @(first ? "" : "mt-2")">
                            <div class="flex-grow-1 d-flex flex-column">
                                <div class="fw-bold fs-5 mb-3">@(quiz.Name)</div>

                                <div class="d-flex flex-row align-items-center mb-2">
                                    <i class="far fa-clock icon-sm me-2"></i>
                                    <span class="text-truncate">
                                        <span class="fw-bold">Zamknięcie:</span>
                                        @quiz.CloseDate.ToString("dd.MM.yyyy, HH:mm")
                                    </span>
                                </div>
                                <div class="d-flex flex-row align-items-center mb-2">
                                    <i class="fas fa-music icon-sm me-2"></i>
                                    <span class="fw-bold me-1">Zadania:</span>
                                    <span>@(quiz.Exercises.Count)</span>
                                </div>
                                <div class="d-flex flex-row align-items-center">
                                    <i class="fas fa-user icon-sm me-2"></i>
                                    <span class="fw-bold me-1">Twórca:</span>
                                    <span>@(quiz.Creator.FullName)</span>
                                </div>
                            </div>

                            @if (Model.IsParticipant && !Model.UserGradedQuizIds.Contains(quiz.Id))
                            {
                                <div class="d-flex flex-column h-100">
                                    <a asp-page="/Solve" asp-route-code="@(quiz.Code)" class="btn btn-primary ms-auto mt-auto">
                                        @(Model.UserSolvedQuizIds.Contains(quiz.Id)
                                            ? "Edytuj" : "Rozwiąż")
                                    </a>
                                </div>
                            }
                        </div>
                        first = false;
                    }
                </div>
            </div>

            <div class="w-50 h-100 rounded bg-white shadow-sm border border-1 d-flex flex-column"
                style="min-width: 200px">
                <div class="bg-light rounded-top d-flex flex-row fw-bold fs-5 p-2">
                    <span class="mx-auto">Zaplanowane</span>
                </div>

                <hr class="m-0 border border-1" />

                <div class="flex-grow-1 d-flex flex-column p-2 overflow-auto">
                    @{
                        first = true;
                    }
                    @foreach (var quiz in Model.FutureQuizzes)
                    {
                        <div
                            class="border border-1 rounded p-0 flex-shrink-0 d-flex flex-row overflow-hidden p-3 @(first ? "" : "mt-2")">
                            <div class="flex-grow-1 d-flex flex-column">
                                <div class="fw-bold fs-5 mb-3">@(quiz.Name)</div>

                                <div class="d-flex flex-row align-items-center mb-2">
                                    <i class="far fa-clock icon-sm me-2"></i>
                                    <span class="text-truncate">
                                        <span class="fw-bold">Otwarcie:</span>
                                        @quiz.OpenDate.ToString("dd.MM.yyyy, HH:mm")
                                    </span>
                                </div>
                                <div class="d-flex flex-row align-items-center mb-2">
                                    <i class="fas fa-music icon-sm me-2"></i>
                                    <span class="fw-bold me-1">Zadania:</span>
                                    <span>@(quiz.Exercises.Count())</span>
                                </div>
                                <div class="d-flex flex-row align-items-center">
                                    <i class="fas fa-user icon-sm me-2"></i>
                                    <span class="fw-bold me-1">Twórca:</span>
                                    <span>@(quiz.Creator.FullName)</span>
                                </div>
                            </div>
                        </div>
                        first = false;
                    }
                </div>
            </div>
        </div>

        <div id="gradeQuizesSection" class="h-100 d-flex flex-row overflow-auto px-3 d-none">
            <div class="w-50 h-100 rounded bg-white shadow-sm border border-1 d-flex flex-column me-3"
                style="min-width: 200px">
                <div class="bg-light rounded-top d-flex flex-row fw-bold fs-5 p-2">
                    <span class="mx-auto">Do oceny</span>
                </div>

                <hr class="m-0 border border-1" />

                <div class="flex-grow-1 d-flex flex-column p-2 overflow-auto">
                    @{
                        first = true;
                    }
                    @foreach (var quiz in Model.ToGradeQuizzes)
                    {
                        <div
                            class="border border-1 rounded p-0 flex-shrink-0 d-flex flex-row overflow-hidden p-3 @(first ? "" : "mt-2")">
                            <div class="flex-grow-1 d-flex flex-column">
                                <div class="fw-bold fs-5 mb-3">@(quiz.Name)</div>

                                <div class="d-flex flex-row align-items-center mb-2">
                                    <i class="far fa-clock icon-sm me-2"></i>
                                    <span class="text-truncate">
                                        <span class="fw-bold">@(quiz.State == QuizState.Open ? "Zamknięcie:" :
                                        "Zamknięto:")</span>
                                        @quiz.CloseDate.ToString("dd.MM.yyyy, HH:mm")
                                    </span>
                                </div>
                                @if (Model.IsAdmin)
                                {
                                    <div class="d-flex flex-row align-items-center mb-2">
                                        <i class="fas fa-user-group icon-sm me-2"></i>
                                        <span class="fw-bold me-1">Wypełniono:</span>
                                        @quiz.Exercises.First().ExerciseSolutions.Count / @quiz.Participants.Count
                                    </div>
                                }
                                <div class="d-flex flex-row align-items-center">
                                    <i class="fas fa-user icon-sm me-2"></i>
                                    <span class="fw-bold me-1">Twórca:</span>
                                    <span>@(quiz.Creator.FullName)</span>
                                </div>
                            </div>

                            @if (Model.IsAdmin)
                            {
                                <div class="d-flex flex-column h-100">
                                    <a asp-page="/Grade" asp-route-id="@(quiz.Id)"
                                        class="btn btn-primary ms-auto mt-auto">Oceń</a>
                                </div>
                            }
                            else
                            { // dont change structure of this if, it must be like this
                                @if (quiz.State == QuizState.Open)
                                {
                                    <div class="d-flex flex-column h-100">
                                        <a asp-page="/Solve" asp-route-code="@(quiz.Code)" class="btn btn-primary ms-auto mt-auto">
                                            Edytuj
                                        </a>
                                    </div>
                                }
                                else
                                {
                                    <div class="d-flex flex-column h-100">
                                        <a asp-page="/Browse" asp-route-id="@(quiz.Id)"
                                            class="btn btn-primary ms-auto mt-auto">Przeglądaj</a>
                                    </div>
                                }
                            }
                        </div>
                        first = false;
                    }
                </div>
            </div>

            <div class="w-50 h-100 rounded bg-white shadow-sm border border-1 d-flex flex-column"
                style="min-width: 200px">
                <div class="bg-light rounded-top d-flex flex-row fw-bold fs-5 p-2">
                    <span class="mx-auto">Ocenione</span>
                </div>

                <hr class="m-0 border border-1" />

                <div class="flex-grow-1 d-flex flex-column p-2 overflow-auto">
                    @{
                        first = true;
                    }
                    @foreach (var quiz in Model.GradedQuizzes)
                    {
                        <div
                            class="border border-1 rounded p-0 flex-shrink-0 d-flex flex-row overflow-hidden p-3 @(first ? "" : "mt-2")">
                            <div class="flex-grow-1 d-flex flex-column">
                                <div class="fw-bold fs-5 mb-3">@(quiz.Name)</div>

                                <div class="d-flex flex-row align-items-center mb-2">
                                    <i class="far fa-clock icon-sm me-2"></i>
                                    <span class="text-truncate">
                                        <span class="fw-bold">@(quiz.State == QuizState.Open ? "Zamknięcie:" :
                                        "Zamknięto:")</span>
                                        @quiz.CloseDate.ToString("dd.MM.yyyy, HH:mm")
                                    </span>
                                </div>
                                @if (Model.IsAdmin)
                                {
                                    <div class="d-flex flex-row align-items-center mb-2">
                                        <i class="fas fa-user-group icon-sm me-2"></i>
                                        <span class="fw-bold me-1">Wypełniono:</span>
                                        @quiz.Exercises.First().ExerciseSolutions.Count / @quiz.Participants.Count
                                    </div>
                                }
                                <div class="d-flex flex-row align-items-center">
                                    <i class="fas fa-user icon-sm me-2"></i>
                                    <span class="fw-bold me-1">Twórca:</span>
                                    <span>@(quiz.Creator.FullName)</span>
                                </div>
                            </div>

                            @if (Model.IsAdmin)
                            {
                                <div class="d-flex flex-column h-100">
                                    <a asp-page="/Grade" asp-route-id="@(quiz.Id)"
                                        class="btn btn-primary ms-auto mt-auto">Edytuj oceny</a>
                                </div>
                            }
                            else
                            {
                                <div class="d-flex flex-column h-100">
                                    <div class="fw-bold ms-auto fs-5">Ocena: @(((Grade)(quiz.QuizResults.First(qr => qr.UserId
                                ==
                                Model.CurrentUserId).Grade)!).AsString())</div>
                                    <a asp-page="/Browse" asp-route-id="@(quiz.Id)"
                                        class="btn btn-primary ms-auto mt-auto">Przeglądaj</a>
                                </div>
                            }
                        </div>
                        first = false;
                    }
                </div>
            </div>
        </div>

    </div>
</div>

<partial name="~/Pages/Shared/DeleteUserPopup.cshtml" />
<partial name="~/Pages/Shared/AddUsersPopup.cshtml" />

<script>

    const usersButton = document.getElementById("usersButton");
    const groupQuizesButton = document.getElementById("groupQuizesButton");
    const gradeQuizesButton = document.getElementById("gradeQuizesButton");
    const usersSection = document.getElementById("usersSection");
    const groupQuizesSection = document.getElementById("groupQuizesSection");
    const gradeQuizesSection = document.getElementById("gradeQuizesSection");
    const smallTabSelect = document.getElementById("sm-tab-select");

    function switchTab(tabIndex) {
        if (tabIndex == 0) {
            usersButton.classList.add("btn-primary");
            usersButton.classList.remove("btn-outline-secondary", "hover-primary");
            groupQuizesButton.classList.add("btn-outline-secondary", "hover-primary");
            groupQuizesButton.classList.remove("btn-primary");
            gradeQuizesButton.classList.add("btn-outline-secondary", "hover-primary");
            gradeQuizesButton.classList.remove("btn-primary");

            usersSection.classList.remove("d-none");
            groupQuizesSection.classList.add("d-none")
            gradeQuizesSection.classList.add("d-none")
        } else if (tabIndex == 1) {
            usersButton.classList.add("btn-outline-secondary", "hover-primary");
            usersButton.classList.remove("btn-primary");
            groupQuizesButton.classList.add("btn-primary");
            groupQuizesButton.classList.remove("btn-outline-secondary", "hover-primary");
            gradeQuizesButton.classList.add("btn-outline-secondary", "hover-primary");
            gradeQuizesButton.classList.remove("btn-primary");

            usersSection.classList.add("d-none")
            groupQuizesSection.classList.remove("d-none");
            gradeQuizesSection.classList.add("d-none")
        } else {
            usersButton.classList.add("btn-outline-secondary", "hover-primary");
            usersButton.classList.remove("btn-primary");
            groupQuizesButton.classList.add("btn-outline-secondary", "hover-primary");
            groupQuizesButton.classList.remove("btn-primary");
            gradeQuizesButton.classList.add("btn-primary");
            gradeQuizesButton.classList.remove("btn-outline-secondary", "hover-primary");

            usersSection.classList.add("d-none")
            groupQuizesSection.classList.add("d-none");
            gradeQuizesSection.classList.remove("d-none")
        }

        smallTabSelect.value = tabIndex;
    }

    async function deleteUser(userId, fromStudents, divIndex) {
        document.getElementById("deleteUserId").value = userId;
        document.getElementById("deleteUserFromStudents").value = fromStudents;

        const form = document.getElementById("formForDeleteUser");
        const formData = new FormData(form);

        try {
            const response = await fetch(form.action, {
                method: form.method,
                body: formData,
                redirect: 'follow'
            });

            if (response.status === 403) {
                window.location.href = '/Identity/Account/Login';
            }

            if (response.redirected) {
                window.location.href = response.url;
            }

            // Handle JSON responses (for normal operation)
            if (response.headers.get('content-type')?.includes('application/json')) {
                const result = await response.json();

                if (result.success) {
                    const listElementId = fromStudents ? "students-list-element-" + divIndex : "teachers-list-element-" + divIndex;
                    const listElement = document.getElementById(listElementId);
                    if (listElement) {
                        listElement.remove();
                    }

                    const countElement = document.getElementById(fromStudents ? "student-list-count" : "teacher-list-count");
                    const currentCount = parseInt(countElement.textContent.match(/\d+/)[0]);
                    const newCount = currentCount - 1;
                    countElement.textContent = `(${newCount})`;
                }
            }
        } catch (error) {
            console.error('An error occurred:', error);
        }
    }

    async function addUsers(userEmails, areAdmins) {
        document.getElementById("addUserAsAdmins").value = areAdmins;
        document.getElementById("addUsersEmails").value = userEmails;

        const form = document.getElementById("formForAddUsers");
        const formData = new FormData(form);

        try {
            const response = await fetch(form.action, {
                method: form.method,
                body: formData,
                redirect: 'follow'
            });

            // Handle Forbidden (403) response
            if (response.status === 403) {
                window.location.href = '/Identity/Account/Login';
                return null;
            }

            // Handle redirect responses
            if (response.redirected) {
                window.location.href = response.url;
                return null;
            }

            // Handle JSON responses (for normal operation)
            if (response.headers.get('content-type')?.includes('application/json')) {
                const result = await response.json();

                if (result.wrongEmails) {
                    return result.wrongEmails;
                }

                if (result.success) {
                    console.log('Users added successfully');
                    addEmailsToWaitList(userEmails, areAdmins);
                    return null;
                }
            }

            return null;
        }
        catch (error) {
            console.error('An error occurred:', error);
            return null;
        }
    }

    function addEmailsToWaitList(userEmails, areAdmins) {
        const countElement = document.getElementById(areAdmins ? "teacher-requests-count" : "student-requests-count");
        const listElement = document.getElementById(areAdmins ? "teacher-requests-list" : "student-requests-list");

        // Update count
        const currentCount = parseInt(countElement.textContent.match(/\d+/)[0]);
        const newCount = currentCount + userEmails.length;
        countElement.textContent = `(${newCount})`;

        // Add new elements
        userEmails.forEach(email => {
            const newRequestDiv = document.createElement('div');
            newRequestDiv.className = 'bg-transparent rounded-bottom rounded border d-flex flex-row p-2 mb-2';

            const emailSpan = document.createElement('span');
            emailSpan.className = 'text-truncate me-2';
            emailSpan.textContent = email;

            newRequestDiv.appendChild(emailSpan);
            listElement.appendChild(newRequestDiv);
        });

    }

    switchTab(0);
</script>