@*
ADD USERS MODAL POPUP

ATRYBUTY:
    - data-adding-admins: Bool, jeżeli jest true to dodajemy adminów, jeżeli false to zwykłych użytkowników
    - data-callback-name: Nazwa callbacku js, wywołanego przy wciśnięciu przycisku dodaj. Callback ten musi zawierać 2 argumenty - assignedEmails i areAdmins
*@

<div class="modal fade" id="addUsersPopup" tabindex="-1" role="dialog" aria-labelledby="addUsersPopupCenterTitle" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content d-flex flex-column overflow-hidden">
            <div class="d-flex flex-row modal-header">
                <span id="addUsersTitle" class="fw-bold fs-4">Dodaj uczestników grupy</span>
                <button type="button" class="ms-auto btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <div class="d-flex flex-column overflow-auto p-3">
                <div class="rounded shadow d-flex flex-column border mb-3">
                    <div class="bg-light rounded-top d-flex flex-row fw-bold p-2">
                        <span>Wpisz email użytkownika</span>
                    </div>

                    <hr class="m-0 border border-1" />

                    <div class="p-2">
                        <input id="assignEmailInput" class="form-control" type="email" placeholder="user@example.com" required />
                    </div>
                </div>

                <div class="rounded shadow d-flex flex-column border" style="height: 205px;">
                    <div class="bg-light rounded-top d-flex flex-row fw-bold p-2">
                        <span id="newUsersTitle" class="me-1">Nowi uczestnicy</span>
                        <span id="emailsNumber">(2)</span>
                    </div>

                    <hr class="m-0 border border-1" />

                    <div id="emailListContainer" class="p-2 overflow-auto">
                        @*FILLED VIA JS*@
                    </div>
                </div>
            </div>


            <div class="modal-footer">
                <button type="button" class="btn btn-secondary btn-sm-width" data-bs-dismiss="modal">Anuluj</button>
                <button type="button" class="btn btn-primary btn-sm-width" data-bs-dismiss="modal" id="addUserButton">Dodaj</button>
            </div>
        </div>
    </div>
</div>


<script>

    var addUsersPopup = document.getElementById('addUsersPopup');
    var addUserButton = addUsersPopup.querySelector('#addUserButton');
    let assignModalButton;

    var addingAdmins = false;
    var assignedEmails = [];

    var emailInput = document.getElementById("assignEmailInput");
    const emailReg = /^([\w-\.]+@@([\w-]+\.)+[\w-]{2,4})?$/;

    emailInput.addEventListener("focusout", addEmail);
    emailInput.addEventListener("keypress", function (event) {
        if (event.key === "Enter") {
            emailInput.blur();
        }
    });

    addUsersPopup.addEventListener('show.bs.modal', function (event) {
        assignModalButton = event.relatedTarget;

        addingAdmins = assignModalButton.getAttribute('data-adding-admins') === "true";
        assignedEmails = [];

        updateEmailsList();

        addUsersPopup.querySelector('#addUsersTitle').innerText = addingAdmins ? "Dodaj adminów grupy" : "Dodaj uczestników grupy";
        addUsersPopup.querySelector('#newUsersTitle').innerText = addingAdmins ? "Nowi admini" : "Nowi uczestnicy";;

    });

    addUserButton.addEventListener('click', function (event) {
        var callbackName = assignModalButton.getAttribute('data-callback-name');

        if (typeof window[callbackName] === 'function') {
            window[callbackName](assignedEmails, addingAdmins);
        } else {
            console.error("Callback function not found:", callbackName);
        }
    });

    function isValidEmail(email) {
        return emailReg.test(email) && !assignedEmails.includes(email);
    }

    function addEmail() {
        const email = emailInput.value;

        if (email === '') {
            emailInput.classList.remove("input-error");
            return;
        }

        if (isValidEmail(email)) {
            assignedEmails.push(emailInput.value);

            emailInput.value = "";
            emailInput.classList.remove("input-error");

            updateEmailsList()
        } else {
            emailInput.classList.add("input-error");
        }
    }

    function updateEmailsList() {
        const emailListContainer = document.getElementById("emailListContainer");
        const emailsNumber = document.getElementById("emailsNumber");
        emailListContainer.innerHTML = "";
        emailsNumber.innerText = `(${assignedEmails.length})`;

        assignedEmails.forEach((email, index) => {
            const emailDiv = document.createElement("div");
            emailDiv.className = `bg-transparent rounded border d-flex flex-row p-2 ${index != 0 ? "mt-2" : ""}`;
            emailDiv.innerHTML = `
                <span class="text-truncate me-2">${email}</span>
                <button type="button" class="ms-auto btn-close" aria-label="Close"></button>
            `;

            emailListContainer.appendChild(emailDiv);

            const deleteButton = emailDiv.querySelector("button");
            deleteButton.addEventListener("click", function (event) {
                event.preventDefault();

                const indexToRemove = parseInt(deleteButton.getAttribute("data-index"));
                assignedEmails.splice(indexToRemove, 1);
                updateEmailsList();
            });

            emailListContainer.appendChild(emailDiv);
        });
    }

</script>
