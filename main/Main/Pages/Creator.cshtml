@page
@model Main.Pages.CreatorModel

<head>
    <link rel="stylesheet" href="~/css/function-creator-styles.css" />
    <link rel="stylesheet" href="~/css/creator-style.css" />
</head>

<form method="post" class="h-100 w-100">
    <div class="h-100 w-100 d-flex flex-column">
        <div class="flex-grow-1 d-flex flex-row overflow-auto" style="margin: -20px; padding: 20px">
            <div class="left-panel bg-white rounded shadow me-3 p-3">
                <div class="mb-3">
                    <label asp-for="QuizName" class="form-label fw-bold"></label>
                    <input asp-for="QuizName" class="form-control" readonly="@Model.BrowseOnly"
                        placeholder="Nazwa quizu">
                    <span asp-validation-for="QuizName" class="text-danger"></span>
                </div>
            </div>

            <div class="flex-grow-1 bg-white rounded shadow p-3 d-flex flex-column overflow-auto">
                <span asp-validation-for="Questions" id="questions-validation-error" class="text-danger mb-1"></span>

                <div id="excersise-container" class="d-flex flex-column">
                    @* EXCERSISES ARE FILLED WITH JAVA SCRIPT *@
                </div>

                @if (!Model.BrowseOnly)
                {
                    <div class="task task-add rounded d-flex justify-content-center align-items-center"
                        onclick="addExcersise()">
                        <span class="plus">+</span>
                        <span>Dodaj zadanie</span>
                    </div>
                }
            </div>
        </div>

        <input type="hidden" asp-for="EditedQuizId" value="@Model.EditedQuizId" />
        <div class="py-3 d-flex align-items-center">
            <a asp-page="Created" class="btn btn-danger btn-std-width">Powrót</a>
            @* <input type="button" value="Test" onclick="confirmExcersises()" /> *@
            @if (!Model.BrowseOnly)
            {
                <button type="submit" asp-page-handler="Save" class="btn btn-secondary btn-std-width ms-auto" onclick="return confirmExcersises(event)">
                    Zapisz
                </button>

                @* TODO: DODAĆ ŻEBY BUTTON PUBLIKUJ DZIAŁAŁ (TAK JAK ZAPISZ, ALE OD RAZU OTWIERA POPUP) *@
                @* <button type="submit" asp-page-handler="Submit" class="btn btn-primary btn-std-width ms-3"
                    onclick="confirmExcersises()">Opublikuj</button> *@
            }
            else
            {
                <button type="button" class="btn btn-primary btn-std-width ms-auto">@(Model.Code == null ? "Quiz zakończony"
                : "KOD: " + Model.Code)</button>
                @if (Model.Code != null)
                {
                    <button type="button" class="btn btn-primary btn-std-width ms-auto"
                        onclick="navigator.clipboard.writeText('harmony.io/solve?code=@Model.Code')">Skopiuj link quizu do
                        schowka</button>
                }
            }
        </div>
    </div>
</form>

<script type="module">
    import { TaskContainer } from "./js/creator-scripts/taskContainer.js";
    import { parseTonationToAccidentalsCount } from "./js/utils.js";

    const answer = [];

    const excersiseContainer = document.getElementById('excersise-container');
    const taskContainer = new TaskContainer(excersiseContainer);
    const questionsValidationError = document.getElementById('questions-validation-error');

    const excersises = @Html.Raw(
        Json.Serialize(
        Model.Questions?
            .Select(q => q ?? "")
            .ToList() ?? new List<string>()
        )
    );

    function addExisting() {
        taskContainer.load(excersises);
        questionsValidationError.innerText = '';
    }

    window.addExcersise = function () {
        taskContainer.addTask();
        questionsValidationError.innerText = '';
    }

    window.confirmExcersises = function (event) {
        questionsValidationError.innerText = '';
        answer.length = 0;
        const tasks = taskContainer.tasks;

        for (let i = 0; i < tasks.length; i++) {
            const currentTask = tasks[i];

            const questionText = currentTask.questionInput.value;
            const hiddenInput = currentTask.hiddenInput;

            const tonationLetterSelect = currentTask.tonationNameSelect;
            const accidentalSelect = currentTask.tonationAccidentalSelect;
            const modeSelect = currentTask.tonationModeSelect;
            const metreSelect = currentTask.metreSelect;

            const metreSplitted = metreSelect.value.split('/');
            const metreCount = metreSplitted[0];
            const metreValue = metreSplitted[1];

            const tonationString = `${tonationLetterSelect.value}${accidentalSelect.value}${modeSelect.value}`;
            const tonationParsed = parseTonationToAccidentalsCount(tonationString);
            const sharpsCount = tonationParsed[0];
            const flatsCount = tonationParsed[1];

            const taskResult = currentTask.getResult();
            let good = true;

            taskResult.forEach(f => {
                if (f.symbol === null || f.symbol === '' || f.symbol === " ") {
                    // TODO: Może jakiś popup?
                    questionsValidationError.innerText = "W zadaniu nie może być pustych funkcji.";
                    event.preventDefault();
                    good = false;
                }
            });

            if (good) {
                console.log(taskResult);

                answer.push({
                    question: questionText,
                    sharpsCount: Number(sharpsCount),
                    flatsCount: Number(flatsCount),
                    metreValue: Number(metreValue),
                    metreCount: Number(metreCount),
                    task: taskResult
                });

                hiddenInput.value = JSON.stringify(answer[i]);
            }
            else
                return false;
        }

        return true;
    }        

    addExisting();
</script>

@section Scripts {
    @{
                            <partial name="_ValidationScriptsPartial" />
    }
}