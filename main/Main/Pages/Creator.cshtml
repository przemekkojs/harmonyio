@page
@model Main.Pages.CreatorModel
@{
    ViewData["Title"] = "Harmony.io - Stwórz quiz";
}

<head>
    <link rel="stylesheet" href="~/css/function-creator-styles.css" />
    <link rel="stylesheet" href="~/css/creator-style.css" />
</head>

<form method="post" class="h-100 w-100 d-flex flex-column" id="pageForm" asp-page-handler="save">
    <div class="flex-grow-1 d-flex flex-column mb-3 overflow-auto">
        <div class="flex-grow-1 d-flex flex-row overflow-auto">
            <div class="sidebar d-flex flex-column bg-white rounded shadow me-3 py-3">
                <div class="mb-auto mx-3">
                    <label asp-for="QuizName" class="form-label fw-bold"></label>
                    <input id="QuizName" name="QuizName" asp-for="QuizName"
                        class="form-control bg-white border-secondary" readonly="@Model.BrowseOnly"
                        placeholder="Nazwa quizu">
                    <span asp-validation-for="QuizName" class="text-danger" id="quiz-name-validation"></span>
                </div>

                <hr class="m-0 mb-3" />
                <a class="btn btn-outline-primary btn-std-width mx-auto" data-bs-toggle="modal"
                    data-bs-target="#helpPopup" data-header="Tworzenie quizu"
                    data-text="<p> Znajdujesz się aktualnie w ekranie kreatora quizu, gdzie możesz utworzyć nowy szkic. </p><p> Pierwszym krokiem tworzenia quizu jest nadanie mu nazwy. Możesz zrobić to w polu „Nazwa quizu”, znajdującym się w na samej górze lewego panelu strony. </p><p> Quiz musi oczywiście zawierać również jakieś zadania funkcyjne. Kliknij w kafelek „Dodaj zadanie” w prawym panelu strony, aby utworzyć nowe zadanie. Powstałe zadanie uzupełnić musisz za pomocą naszego kreatora. Wpisz maksymalną ilość punktów, którą chcesz za nie przyznawać, jego metrum oraz tonację. Opcjonalnie możesz również napisać coś w poleceniu zadania, chociaż nie jest to konieczne. Poniżej możesz dodawać kolejne takty za pomocą kafelka „Dodaj takt”. Wewnątrz każdego taktu możesz dodawać kolejne funkcje harmoniczne za pomocą plusa. Możesz również wylosować zadanie dla danej ilości taktów, korzystając z sekcji „Wylosuj zadanie”. </p><p> Po utworzeniu zadań zapisz quiz za pomocą przycisku „Zapisz”. Dopóki nie opublikujesz tego quizu, będziesz mógł zawsze wrócić i go edytować. </p>">
                    <i class="far fa-circle-question"></i>
                    Pomoc
                </a>
                <hr class="m-0 my-3" />

                @if (!Model.BrowseOnly)
                {
                    <button type="button" asp-page-handler="Save" class="btn btn-primary btn-std-width mx-auto mt-2"
                        onclick="submitForm(event)">Zapisz</button>
                }

                <a href="#" class="btn btn-danger btn-std-width mt-2 mx-auto" data-bs-toggle="modal"
                    data-bs-target="#confirmLeaveModal" data-confirm-redirect="/Created">
                    Wyjdź
                </a>
            </div>

            <div class="flex-grow-1 bg-white rounded shadow p-3 d-flex flex-column overflow-auto">
                <span asp-validation-for="Questions" id="questions-validation-error" class="text-danger mb-1"></span>

                <div id="exercise-container" class="d-flex flex-column">
                    @* EXERCISES ARE FILLED WITH JAVA SCRIPT *@
                </div>

                @if (!Model.BrowseOnly)
                {
                    <div class="task task-add rounded d-flex justify-content-center align-items-center"
                        onclick="addExercise()">
                        <span class="plus">+</span>
                        <span>Dodaj zadanie</span>
                    </div>
                }
            </div>
        </div>

        <input name="EditedQuizId" type="hidden" asp-for="EditedQuizId" value="@Model.EditedQuizId" />
        <input name="Questions" type="hidden" asp-for="Questions" />
    </div>
</form>
<partial name="~/Pages/Shared/ConfirmLeavePopup.cshtml" />

<partial name="~/Pages/Shared/HelpPopup.cshtml" />

<script type="module">
    import { TaskContainer } from "./js/creator-scripts/taskContainer.js";
    import { parseTonationToAccidentalsCount } from "./js/utils.js";

    const answer = [];

    const exerciseContainer = document.getElementById('exercise-container');
    const taskContainer = new TaskContainer(exerciseContainer);
    const questionsValidationError = document.getElementById('questions-validation-error');
    const defaultPoints = 10;

    const exercises = @Html.Raw(
        Json.Serialize(
        Model.Questions?
            .Select(q => q ?? "")
            .ToList() ?? new List<string>()
        )
        );

    window.submitForm = async function submitForm(event) {
        questionsValidationError.innerText = "";
        const tasksResult = confirmExercises(event);

        if (!tasksResult) {
            // TODO: Ładniejszy popup
            questionsValidationError.innerText = "Zadanie zawiera błędy.";
            return;
        }

        const questions = [];
        const tasks = taskContainer.tasks;

        if (tasks.length === 0) {
            questionsValidationError.innerText = "Dodaj przynajmniej jedno zadanie.";
            return;
        }

        tasks.forEach(t => {
            const toAppend = t.hiddenInput.value;
            questions.push(toAppend);
        });

        event.preventDefault();

        const form = document.getElementById('pageForm');
        const maxes = [];

        tasks.forEach(t => {
            const toAppend = t.maxPointsInput.value;

            // Niech wartość defaultowa będzie równa 10 pkt / zadanie
            if (toAppend === null)
                toAppend = defaultPoints;

            maxes.push(toAppend);
        });

        const quizName = document.getElementById("QuizName").value;
        const verificationToken = form
            .querySelector("[name='__RequestVerificationToken']")
            .value;

        if (quizName == '') {
            document.getElementById('quiz-name-validation').innerText = "Nazwa quizu jest wymagana";
            return;
        }

        const editedQuizId = form
            .querySelector("[name='EditedQuizId']")
            .value;

        const formData = new FormData();
        formData.append("__RequestVerificationToken", verificationToken);
        formData.append("QuizName", quizName);
        formData.append("Questions", JSON.stringify(questions));
        formData.append("EditedQuizId", editedQuizId);
        formData.append("Maxes", JSON.stringify(maxes));

        try {
            const response = await fetch(form.action, {
                method: 'POST',
                body: formData
            });

            if (response.ok) {
                const contentType = response.headers.get('Content-Type');

                if (contentType && contentType.includes("application/json")) {
                    const result = await response.json();

                    if (result.success) {
                        window.location.href = result.redirectUrl;
                    } else {
                        if (result.redirect) {
                            window.location.href = result.redirectUrl;
                        } else {
                            questionsValidationError.innerText = result.errorMessage;
                        }
                    }
                } else {
                    // Co jak dostaniemy HTML'a
                    questionsValidationError.innerText = "Nieznany błąd.";
                }
            } else {
                questionsValidationError.innerText = "Błąd serwera.";
            }
        }
        catch (error) {
            questionsValidationError.innerText = "Błąd serwera.";
        }
    }

    function addExisting() {
        taskContainer.load(exercises);
        questionsValidationError.innerText = '';
    }

    window.addExercise = function () {
        taskContainer.addTask();
    }

    window.confirmExercises = function (event) {
        questionsValidationError.innerText = '';
        answer.length = 0;
        const tasks = taskContainer.tasks;

        for (let i = 0; i < tasks.length; i++) {
            const currentTask = tasks[i];
            const questionText = currentTask.questionInput.value;

            const tonationLetterSelect = currentTask.tonationNameSelect;
            const modeSelect = currentTask.tonationModeSelect;
            const metreSelect = currentTask.metreSelect;

            const metreSplitted = metreSelect.value.split('/');
            const metreCount = metreSplitted[0];
            const metreValue = metreSplitted[1];

            const tonationString = `${tonationLetterSelect.value}${modeSelect.value}`;
            const tonationParsed = parseTonationToAccidentalsCount(tonationString);
            const sharpsCount = tonationParsed[0];
            const flatsCount = tonationParsed[1];
            const minor = tonationParsed[2];
            const maxPoints = Number(currentTask.maxPointsInput.value);

            if (maxPoints > 100 || maxPoints < 1)
                return false;

            if (sharpsCount == -1 || flatsCount == -1)
                return false;

            const taskResult = currentTask.getResult();

            if (taskResult.includes(null))
                return false;

            const toPush = {
                question: questionText,
                sharpsCount: Number(sharpsCount),
                flatsCount: Number(flatsCount),
                minor: Number(minor),
                metreValue: Number(metreValue),
                metreCount: Number(metreCount),
                maxPoints: Number(maxPoints),
                task: taskResult
            }

            answer.push(toPush);

            const hiddenInput = currentTask.hiddenInput;
            hiddenInput.value = JSON.stringify(toPush);
        }

        return true;
    }

    addExisting();
</script>

@section Scripts {
    @{
        <partial name="_ValidationScriptsPartial" />
    }
}