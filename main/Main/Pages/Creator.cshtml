@page
@model Main.Pages.CreatorModel

<head>
    <link rel="stylesheet" href="~/css/function-creator-styles.css" />
    <link rel="stylesheet" href="~/css/creator-style.css" />
</head>

<form method="post" class="h-100 w-100">
    <div class="h-100 w-100 d-flex flex-column">
        <div class="flex-grow-1 d-flex flex-row overflow-auto" style="margin: -20px; padding: 20px">
            <div class="left-panel bg-white rounded shadow me-3 p-3">
                <div class="mb-3">
                    <label asp-for="QuizName" class="form-label fw-bold"></label>
                    <input asp-for="QuizName" class="form-control" readonly="@Model.BrowseOnly"
                        placeholder="Nazwa quizu">
                    <span asp-validation-for="QuizName" class="text-danger"></span>
                </div>
            </div>

            <div class="flex-grow-1 bg-white rounded shadow p-3 d-flex flex-column overflow-auto">
                <span asp-validation-for="Questions" id="questions-validation-error" class="text-danger mb-1"></span>

                <div id="excersise-container" class="d-flex flex-column">
                    @* EXCERSISES ARE FILLED WITH JAVA SCRIPT *@
                </div>

                @if (!Model.BrowseOnly)
                {
                    <div class="task task-add rounded d-flex justify-content-center align-items-center"
                        onclick="addExcersise()">
                        <span class="plus">+</span>
                        <span>Dodaj zadanie</span>
                    </div>
                }
            </div>
        </div>

        <input type="hidden" asp-for="EditedQuizId" value="@Model.EditedQuizId" />
        <div class="py-3 d-flex align-items-center">
            <a asp-page="Created" class="btn btn-danger btn-std-width">Powrót</a>
            <input type="button" value="Test" onclick="confirmExcersises()" />
            @if (!Model.BrowseOnly)
            {
                <button type="submit" asp-page-handler="Save" class="btn btn-secondary btn-std-width ms-auto"
                    onclick="confirmExcersises()">Zapisz</button>
                @* TODO: DODAĆ ŻEBY BUTTON PUBLIKUJ DZIAŁAŁ (TAK JAK ZAPISZ, ALE OD RAZU OTWIERA POPUP) *@
                @* <button type="submit" asp-page-handler="Submit" class="btn btn-primary btn-std-width ms-3"
                    onclick="confirmExcersises()">Opublikuj</button> *@
            }
            else
            {
                <button type="button" class="btn btn-primary btn-std-width ms-auto">@(Model.Code == null ? "Quiz zakończony"
                : "KOD: " + Model.Code)</button>
                @if (Model.Code != null)
                {
                    <button type="button" class="btn btn-primary btn-std-width ms-auto"
                        onclick="navigator.clipboard.writeText('harmony.io/solve?code=@Model.Code')">Skopiuj link quizu do
                        schowka</button>
                }
            }
        </div>
    </div>
</form>

<script type="module">
    import { tasks, createTask } from "./js/creator-scripts/taskCreator.js";
    import { parseTonationToAccidentalsCount } from "./js/utils.js";

    let excersises = @Html.Raw(
        Json.Serialize(
            Model.Questions?
        .Select(q => q ?? "")
        .ToList() ?? new List<string>()
        ));

    const excersiseContainer = document.getElementById('excersise-container');
    const questionsValidationError = document.getElementById('questions-validation-error');

    function addExisting() {
        let index = 0;

        excersises.forEach(ex => {
            const parsed = JSON.parse(ex);
            console.log(parsed); ////////////////////////////////////////

            const textBox = document.createElement('div');
            const question = parsed.question;

            console.log(question); ////////////////////////////////////////

            textBox.className = "task-content w-100 p-3";
            textBox.id = `task-container-${index}`;
            textBox.innerHTML = `
            <input type="text" id="question-task-${index}" class="form-control task-input" value="${question}" placeholder="Wpisz polecenie" />
            <input type="hidden" name="Questions[${index}]" id="question-json-${index}" />`;

            excersiseContainer.appendChild(textBox);
            createTask(textBox, index);

            const currentTask = tasks[index];
            console.log(currentTask); ////////////////////////////////////////

            const id = `task-container-${index}`;
            const removeButton = document.getElementById(`delete-${index}`);
            removeButton.addEventListener('click', () => removeExcersise(id));
            
            index++;
        });

        questionsValidationError.innerText = '';
    }

    window.confirmExcersises = function () {
        questionsValidationError.innerText = '';
        excersises = [];

        for (let i = 0; i < tasks.length; i++) {
            const questionText = document.getElementById(`question-task-${i}`).value;
            const hiddenInput = document.getElementById(`question-json-${i}`);

            const tonationLetterSelect = document.getElementById(`tonation-name-select-task-${i}`);
            const accidentalSelect = document.getElementById(`accidental-task-${i}`);
            const modeSelect = document.getElementById(`mode-task-${i}`);
            const metreSelect = document.getElementById(`metre-select-task-${i}`);

            const metreSplitted = metreSelect.value.split('/');
            const metreCount = metreSplitted[0];
            const metreValue = metreSplitted[1];

            const tonationString = `${tonationLetterSelect.value}${accidentalSelect.value}${modeSelect.value}`;
            const tonationParsed = parseTonationToAccidentalsCount(tonationString);
            const sharpsCount = tonationParsed[0];
            const flatsCount = tonationParsed[1];

            const taskToConfirm = tasks.filter(x => x.id == i)[0];
            const confirmResult = taskToConfirm.confirmAll();

            excersises.push({
                question: questionText,
                sharpsCount: Number(sharpsCount),
                flatsCount: Number(flatsCount),
                metreValue: Number(metreValue),
                metreCount: Number(metreCount),
                task: tasks[i].result
            });

            hiddenInput.value = JSON.stringify(excersises[i]);
        }
    }

    window.addExcersise = function () {
        excersises.push("");
        const index = excersises.length - 1;
        const textBox = document.createElement('div');

        textBox.className = "task-content w-100 p-3";
        textBox.id = `task-container-${index}`;
        textBox.innerHTML = `
        <input type="text" id="question-task-${index}" class="form-control task-input" value="${excersises[index]}" placeholder="Enter question text" />
        <input type="hidden" name="Questions[${index}]" id="question-json-${index}" />`;

        excersiseContainer.appendChild(textBox);
        createTask(textBox, index);

        const id = `task-container-${index}`;
        const removeButton = document.getElementById(`delete-${index}`);
        removeButton.addEventListener('click', () => removeExcersise(id));

        questionsValidationError.innerText = '';
    }

    function updateExcersise(id) {
        const taskText = document.getElementById(id);

        const children = Array.from(excersiseContainer.children);
        const index = children.indexOf(taskText);

        const taskToConfirm = tasks.filter(x => x.id == index)[0];
        const confirmResult = taskToConfirm.confirmAll();

        if (!confirmResult)
            return;

        questionsValidationError.innerText = '';
    }

    function removeExcersise(id) {
        const taskText = document.getElementById(id);

        const children = Array.from(excersiseContainer.children);
        const index = children.indexOf(taskText);

        if (taskText)
            excersiseContainer.removeChild(taskText);

        excersises.splice(index, 1);

        questionsValidationError.innerText = '';
    }

    addExisting();
</script>

@section Scripts {
    @{
        <partial name="_ValidationScriptsPartial" />
    }
}