@page
@model Main.Pages.SolveModel
@using Main.Models;

<head>
    <link rel="stylesheet" href="~/css/solve-style.css" />
</head>


<div class="h-100 w-100 d-flex flex-row pb-3">
    <form id="solve-form" method="post">
        <input type="hidden" asp-for="QuizId" value="@Model.Quiz.Id" />
        @for (int i = 0; i < Model.Quiz.Excersises.Count; i++)
        {
            <input type="hidden" asp-for="@Model.Answers[@i]" value="@Model.Answers[@i]" />
        }
    </form>
    <div class="bg-white rounded d-flex flex-column shadow py-3 me-3 sidebar">
        <div class="fw-bold fs-4 overflow-hidden px-3 flex-shrink-0" style="text-overflow: ellipsis;">
            @Model.Quiz.Name
        </div>

        <div class="d-flex flex-row align-items-center mt-1 px-3">
            <i class="far fa-clock icon-sm me-1"></i>
            <span id="timer" class="fw-semibold">10h 13min</span>
        </div>

        <hr class="mb-0" />

        <div id="excersises-buttons" class="w-100 py-3 mb-auto px-3 overflow-auto"
            style="display: grid; grid-template-columns: repeat(auto-fill, minmax(30px, 1fr)); gap: 5px;">
            @* FILLED VIA JS *@
        </div>

        <hr class="mt-0" />

        <button id="btn-finish" onclick="submitFormClicked()"
            class="btn btn-primary btn-std-width mx-auto">Zapisz</button>

        <a asp-page="Assigned" class="btn btn-danger btn-std-width mt-2 mx-auto">Wyjdź</a>
    </div>

    <div class="flex-grow-1 w-100 d-flex flex-column bg-white rounded shadow p-3 overflow-auto" id="staff-section-div">
        <div class="d-flex flex-row align-items-start">
            <p id="excersise-question" class="m-0 fw-semibold">
                @*SET VIA JS*@
            </p>
        </div>

        <div id="music-staff-div" class="flex-grow-1 d-flex flex-row">
            @*SET VIA JS*@
        </div>
    </div>
</div>

<script>
    const fontUrl = '@Url.Content("~/fonts/Inconsolata.otf")'
    const staffSectionDiv = document.getElementById("staff-section-div");
    const staffSectionWidth = staffSectionDiv.offsetWidth - 32;
    let canvasWidth = staffSectionWidth;

    const symbolPaths = {
        curlyBrace: '@Url.Content("~/images/staff-symbols/curly-brace.png")',
        bassKey: '@Url.Content("~/images/staff-symbols/bass-key.png")',
        violinKey: '@Url.Content("~/images/staff-symbols/violin-key.png")',
        bemol: '@Url.Content("~/images/staff-symbols/bemol.png")',
        doubleBemol: '@Url.Content("~/images/staff-symbols/double-bemol.png")',
        sharp: '@Url.Content("~/images/staff-symbols/sharp.png")',
        doubleSharp: '@Url.Content("~/images/staff-symbols/double-sharp.png")',
        natural: '@Url.Content("~/images/staff-symbols/natural.png")',
        fullNote: '@Url.Content("~/images/staff-symbols/full-note.png")',
        noteHeadClosed: '@Url.Content("~/images/staff-symbols/note-head-closed.png")',
        noteHeadOpened: '@Url.Content("~/images/staff-symbols/note-head-opened.png")',
        noteFlag: '@Url.Content("~/images/staff-symbols/note-flag.png")',
        mouse: '@Url.Content("~/images/staff-symbols/mouse.png")',
        noteReverse: '@Url.Content("~/images/staff-symbols/note-reverse.png")',
        thrashCan: '@Url.Content("~/images/staff-symbols/thrash-can.png")',
        thrashCanCrossed: '@Url.Content("~/images/staff-symbols/thrash-can-crossed.png")',
        forbiddenSymbol: '@Url.Content("~/images/staff-symbols/forbidden.png")'
    };
    const excersises = @Json.Serialize(Model.Quiz.Excersises);
    const questions = excersises.map(e => JSON.parse(e.question));
</script>

<script src="~/lib/p5/p5.min.js"></script>
<script src="~/js/staff-scripts/constants.js"></script>
<script src="~/js/staff-scripts/symbols.js"></script>
<script src="~/js/staff-scripts/bar.js"></script>
<script src="~/js/staff-scripts/vertical.js"></script>
<script src="~/js/staff-scripts/twoNotes.js"></script>
<script src="~/js/staff-scripts/functionSymbol.js"></script>
<script src="~/js/staff-scripts/note.js"></script>
<script src="~/js/staff-scripts/keySignature.js"></script>
<script src="~/js/staff-scripts/metre.js"></script>
<script src="~/js/staff-scripts/accidental.js"></script>
<script src="~/js/staff-scripts/staff.js"></script>
<script src="~/js/staff-scripts/menu.js"></script>
<script src="~/js/staff-scripts/sketchSolving.js"></script>

<script>
    let currentIndex = 0;

    function loadQuestion(index, loadToGrandStaff = true) {
        if (index >= 0 && index < questions.length) {
            document.getElementById("excersise-question").innerText = questions[index].question;

            if (loadToGrandStaff) {
                grandStaff.loadFromJson(questions[index], document.querySelector(`input[name="Answers[${index}]"]`).value);
            }

            generateButtons(index);
        }
    }

    function safeStaffAnswer() {
        let hiddenInput = document.querySelector(`input[name="Answers[${currentIndex}]"]`);
        const staffJson = grandStaff.toJson();
        hiddenInput.value = staffJson;
    }

    function generateButtons(index) {
        const questionButtonsContainer = document.getElementById("excersises-buttons");
        questionButtonsContainer.innerHTML = '';

        for (let i = 0; i < questions.length; i++) {
            let button = document.createElement("button");
            button.className = "btn " + (i === index ? "btn-secondary btn-current" : "btn-outline-secondary btn-hidable") + " btn-tiny-width p-1";
            button.innerText = i + 1;

            button.onclick = (function (i) {
                return function () {
                    safeStaffAnswer();
                    currentIndex = i;
                    loadQuestion(currentIndex);
                };
            })(i);

            questionButtonsContainer.appendChild(button);
        }
    }

    function submitFormClicked() {
        safeStaffAnswer();
        document.getElementById("solve-form").submit();
    }

    loadQuestion(currentIndex, false);

    const closeDate = new Date("@Model.Quiz.CloseDate.ToString("o")");
    function updateTimer() {
        const now = new Date();
        const timeRemaining = closeDate - now;

        if (timeRemaining <= 0) {
            document.getElementById("countdown").innerText = "0m 0s";
            return;
        }

        const days = Math.floor(timeRemaining / (1000 * 60 * 60 * 24));
        const hours = Math.floor((timeRemaining % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        const minutes = Math.floor((timeRemaining % (1000 * 60 * 60)) / (1000 * 60));
        const seconds = Math.floor((timeRemaining % (1000 * 60)) / 1000);

        let displayText = "";

        if (days > 0) {
            displayText = `${days}d ${hours}h`;
        } else if (hours > 0) {
            displayText = `${hours}h ${minutes}m`;
        } else {
            displayText = `${minutes}m ${seconds}s`;
        }

        document.getElementById("timer").innerText = displayText;
    }

    updateTimer();
    setInterval(updateTimer, 1000);
</script>