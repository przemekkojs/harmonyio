@page
@model Main.Pages.SolveModel
@using Main.Models;

<head>
    <link rel="stylesheet" href="~/css/solve-style.css" />
</head>

<form id="solve-form" method="post" class="h-100 w-100">
    <div class="h-100 w-100 d-flex flex-column">
        <div class="w-100 bg-white rounded shadow p-3 d-flex justify-content-between align-items-center mb-3">
            <div class="fw-bold fs-4">
                @Model.Quiz.Name
            </div>
            <div class="d-flex align-items-center">
                <i class="far fa-clock icon-lg me-2"></i>
                <span id="timer" class="fw-bold">10h 13min</span>
            </div>
        </div>

        <div class="flex-grow-1 w-100 d-flex flex-column bg-white rounded shadow p-3">
            <div class="d-flex flex-row align-items-start question-area">
                <div
                    class="question-square bg-secondary shadow rounded d-flex justify-content-center align-items-center me-3">
                    <div id="excersise-number" class="fs-1 text-white fw-bold">
                        @*SET VIA JS*@
                    </div>
                </div>

                <div class="flex-grow-1">
                    <p id="excersise-question" class="m-0">
                        @*SET VIA JS*@
                    </p>
                </div>
            </div>

            <div id="music-staff-div" class="flex-grow-1 d-flex flex-row mt-3 overflow-auto">
                <input type="hidden" asp-for="QuizId" value="@Model.Quiz.Id" />
                @for (int i = 0; i < Model.Quiz.Excersises.Count; i++)
                {
                    <input type="hidden" asp-for="@Model.Answers[@i]" value="@Model.Answers[@i]" />
                }
            </div>
        </div>

        <div class="bottom-bar d-flex align-items-center py-3">
            <a asp-page="Assigned" class="btn btn-danger btn-std-width me-auto">Powrót</a>
            <button id="btn-prev" type="button" onclick="prevQuestion()"
                class="btn btn-secondary btn-std-width mx-3">Poprzednie</button>

            <div id="excersises-buttons" class="d-flex align-items-center">
                @*EXCERSISES ARE FILLED WITH JS SCRIPT*@
            </div>
            <div id="div-last-ex">
                <img src="~/images/three_dots.png" alt="Three dots" class="ms-2 three-dots-img">
                <button id="btn-last-ex" type="button" onclick="lastQuestion()"
                    class="btn btn-outline-secondary btn-tiny-width p-1 ms-2"></button>
            </div>

            <button id="btn-next" type="button" onclick="nextQuestion()"
                class="btn btn-secondary btn-std-width ms-3">Następne</button>
            <button id="btn-finish" onclick="submitFormClicked()"
                class="btn btn-secondary btn-std-width ms-3">Zakończ</button>
        </div>
    </div>
</form>

<script>
    // needed to allow overflow from canvas div, but now navbar is hiding
    // TODO try fix this
    const mainContainer = document.getElementById('layout-main-container');
    if (mainContainer) {
        mainContainer.classList.remove('overflow-auto');
        mainContainer.style.overflow = 'visible';
    }

    const fontUrl = '@Url.Content("~/fonts/Inconsolata.otf")'

    const symbolPaths = {
        curlyBrace: '@Url.Content("~/images/staff-symbols/curly-brace.png")',
        bassKey: '@Url.Content("~/images/staff-symbols/bass-key.png")',
        violinKey: '@Url.Content("~/images/staff-symbols/violin-key.png")',
        bemol: '@Url.Content("~/images/staff-symbols/bemol.png")',
        doubleBemol: '@Url.Content("~/images/staff-symbols/double-bemol.png")',
        sharp: '@Url.Content("~/images/staff-symbols/sharp.png")',
        doubleSharp: '@Url.Content("~/images/staff-symbols/double-sharp.png")',
        natural: '@Url.Content("~/images/staff-symbols/natural.png")',
        fullNote: '@Url.Content("~/images/staff-symbols/full-note.png")',
        noteHeadClosed: '@Url.Content("~/images/staff-symbols/note-head-closed.png")',
        noteHeadOpened: '@Url.Content("~/images/staff-symbols/note-head-opened.png")',
        noteFlag: '@Url.Content("~/images/staff-symbols/note-flag.png")',
        mouse: '@Url.Content("~/images/staff-symbols/mouse.png")',
        noteReverse: '@Url.Content("~/images/staff-symbols/note-reverse.png")',
        thrashCan: '@Url.Content("~/images/staff-symbols/thrash-can.png")',
        thrashCanCrossed: '@Url.Content("~/images/staff-symbols/thrash-can-crossed.png")',
    };
    const excersises = @Json.Serialize(Model.Quiz.Excersises);
    const questions = excersises.map(e => JSON.parse(e.question));
</script>

<script src="~/lib/p5/p5.min.js"></script>
<script src="~/js/staff-scripts/constants.js"></script>
<script src="~/js/staff-scripts/symbols.js"></script>
<script src="~/js/staff-scripts/bar.js"></script>
<script src="~/js/staff-scripts/vertical.js"></script>
<script src="~/js/staff-scripts/twoNotes.js"></script>
<script src="~/js/staff-scripts/functionSymbol.js"></script>
<script src="~/js/staff-scripts/note.js"></script>
<script src="~/js/staff-scripts/keySignature.js"></script>
<script src="~/js/staff-scripts/metre.js"></script>
<script src="~/js/staff-scripts/accidental.js"></script>
<script src="~/js/staff-scripts/staff.js"></script>
<script src="~/js/staff-scripts/menu.js"></script>
<script src="~/js/staff-scripts/sketchSolving.js"></script>

<script>
    let currentIndex = 0;

    function changeAnswer(value) {
        let hiddenInput = document.querySelector(`input[name="Answers[${currentIndex}]"]`);
        hiddenInput.value = value;
    }

    function loadQuestion(index, loadToGrandStaff = true) {
        if (index >= 0 && index < questions.length) {
            document.getElementById("excersise-number").innerText = index + 1;
            document.getElementById("excersise-question").innerText = questions[index].question;

            document.getElementById("btn-next").style.display = index === questions.length - 1 ? 'none' : 'inline-block';
            document.getElementById("btn-finish").style.display = index === questions.length - 1 ? 'inline-block' : 'none';

            if (loadToGrandStaff) {
                grandStaff.loadFromJson(questions[index], document.querySelector(`input[name="Answers[${index}]"]`).value);
            }

            generateButtons(index);
        }
    }

    function safeStaffAnswer() {
        let hiddenInput = document.querySelector(`input[name="Answers[${currentIndex}]"]`);
        const staffJson = grandStaff.toJson();
        hiddenInput.value = staffJson;
    }


    const maxVisibleButtons = 9;
    const targetVisibleOneSide = Math.floor(maxVisibleButtons / 2)
    function generateButtons(index) {
        const questionButtonsContainer = document.getElementById("excersises-buttons");
        questionButtonsContainer.innerHTML = '';

        let start = Math.max(index - targetVisibleOneSide, 0);
        let end = Math.min(index + targetVisibleOneSide, questions.length - 1);

        let missingStart = start - (index - targetVisibleOneSide);
        let missingEnd = (index + targetVisibleOneSide) - end;

        if (missingStart > 0 && missingEnd == 0) {
            end = Math.min(end + missingStart, questions.length - 1);
        }
        else if (missingEnd > 0 && missingStart == 0) {
            start = Math.max(start - missingEnd, 0);
        }

        if (end == questions.length - 2) {
            end++;
        }

        for (let i = start; i <= end; i++) {
            let button = document.createElement("button");
            button.className = "btn " + (i === index ? "btn-secondary btn-current" : "btn-light btn-hidable") + " btn-tiny-width p-1";
            button.innerText = i + 1;

            button.onclick = (function (i) {
                return function () {
                    safeStaffAnswer();
                    currentIndex = i;
                    loadQuestion(currentIndex);
                };
            })(i);

            questionButtonsContainer.appendChild(button);

            if (i !== start) {
                button.classList.add("ms-2");
            }
        }

        document.getElementById("btn-last-ex").innerText = questions.length;
        document.getElementById("div-last-ex").style.display = end < questions.length - 1 ? 'inline-block' : 'none';
    }


    function prevQuestion() {
        if (currentIndex > 0) {
            safeStaffAnswer();
            currentIndex--;
            loadQuestion(currentIndex);
        }
    }

    function nextQuestion() {
        if (currentIndex < questions.length - 1) {
            safeStaffAnswer();
            currentIndex++;
            loadQuestion(currentIndex);
        }
    }

    function lastQuestion() {
        if (currentIndex < questions.length - 1) {
            safeStaffAnswer();
            currentIndex = questions.length - 1;
            loadQuestion(currentIndex);
        }
    }

    function submitFormClicked() {
        safeStaffAnswer();
        document.getElementById("solve-form").submit();
    }

    loadQuestion(currentIndex, false);

    const closeDate = new Date("@Model.Quiz.CloseDate.ToString("o")");
    function updateTimer() {
        const now = new Date();
        const timeRemaining = closeDate - now;

        if (timeRemaining <= 0) {
            document.getElementById("countdown").innerText = "0m 0s";
            return;
        }

        const days = Math.floor(timeRemaining / (1000 * 60 * 60 * 24));
        const hours = Math.floor((timeRemaining % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        const minutes = Math.floor((timeRemaining % (1000 * 60 * 60)) / (1000 * 60));
        const seconds = Math.floor((timeRemaining % (1000 * 60)) / 1000);

        let displayText = "";

        if (days > 0) {
            displayText = `${days}d ${hours}h`;
        } else if (hours > 0) {
            displayText = `${hours}h ${minutes}m`;
        } else {
            displayText = `${minutes}m ${seconds}s`;
        }

        document.getElementById("timer").innerText = displayText;
    }

    updateTimer();
    setInterval(updateTimer, 1000);
</script>